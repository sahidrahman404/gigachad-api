package gigachad

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/sahidrahman404/gigachad-api/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// EquipmentSlice is the resolver for the equipmentSlice field.
func (r *queryResolver) EquipmentSlice(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.EquipmentWhereInput) (*ent.EquipmentConnection, error) {
	panic(fmt.Errorf("not implemented: EquipmentSlice - equipmentSlice"))
}

// Exercises is the resolver for the exercises field.
func (r *queryResolver) Exercises(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.ExerciseWhereInput) (*ent.ExerciseConnection, error) {
	panic(fmt.Errorf("not implemented: Exercises - exercises"))
}

// ExerciseTypes is the resolver for the exerciseTypes field.
func (r *queryResolver) ExerciseTypes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.ExerciseTypeWhereInput) (*ent.ExerciseTypeConnection, error) {
	panic(fmt.Errorf("not implemented: ExerciseTypes - exerciseTypes"))
}

// MusclesGroups is the resolver for the musclesGroups field.
func (r *queryResolver) MusclesGroups(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.MusclesGroupWhereInput) (*ent.MusclesGroupConnection, error) {
	panic(fmt.Errorf("not implemented: MusclesGroups - musclesGroups"))
}

// Routines is the resolver for the routines field.
func (r *queryResolver) Routines(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.RoutineWhereInput) (*ent.RoutineConnection, error) {
	panic(fmt.Errorf("not implemented: Routines - routines"))
}

// RoutineExercises is the resolver for the routineExercises field.
func (r *queryResolver) RoutineExercises(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.RoutineExerciseWhereInput) (*ent.RoutineExerciseConnection, error) {
	panic(fmt.Errorf("not implemented: RoutineExercises - routineExercises"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Workouts is the resolver for the workouts field.
func (r *queryResolver) Workouts(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.WorkoutOrder, where *ent.WorkoutWhereInput) (*ent.WorkoutConnection, error) {
	panic(fmt.Errorf("not implemented: Workouts - workouts"))
}

// WorkoutLogs is the resolver for the workoutLogs field.
func (r *queryResolver) WorkoutLogs(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.WorkoutLogOrder, where *ent.WorkoutLogWhereInput) (*ent.WorkoutLogConnection, error) {
	panic(fmt.Errorf("not implemented: WorkoutLogs - workoutLogs"))
}

// Sets is the resolver for the sets field.
func (r *routineExerciseResolver) Sets(ctx context.Context, obj *ent.RoutineExercise) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Sets is the resolver for the sets field.
func (r *workoutLogResolver) Sets(ctx context.Context, obj *ent.WorkoutLog) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Sets is the resolver for the sets field.
func (r *createRoutineExerciseInputResolver) Sets(ctx context.Context, obj *ent.CreateRoutineExerciseInput, data map[string]interface{}) error {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Sets is the resolver for the sets field.
func (r *createWorkoutLogInputResolver) Sets(ctx context.Context, obj *ent.CreateWorkoutLogInput, data map[string]interface{}) error {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Sets is the resolver for the sets field.
func (r *updateRoutineExerciseInputResolver) Sets(ctx context.Context, obj *ent.UpdateRoutineExerciseInput, data map[string]interface{}) error {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Sets is the resolver for the sets field.
func (r *updateWorkoutLogInputResolver) Sets(ctx context.Context, obj *ent.UpdateWorkoutLogInput, data map[string]interface{}) error {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// RoutineExercise returns RoutineExerciseResolver implementation.
func (r *Resolver) RoutineExercise() RoutineExerciseResolver { return &routineExerciseResolver{r} }

// WorkoutLog returns WorkoutLogResolver implementation.
func (r *Resolver) WorkoutLog() WorkoutLogResolver { return &workoutLogResolver{r} }

// CreateRoutineExerciseInput returns CreateRoutineExerciseInputResolver implementation.
func (r *Resolver) CreateRoutineExerciseInput() CreateRoutineExerciseInputResolver {
	return &createRoutineExerciseInputResolver{r}
}

// CreateWorkoutLogInput returns CreateWorkoutLogInputResolver implementation.
func (r *Resolver) CreateWorkoutLogInput() CreateWorkoutLogInputResolver {
	return &createWorkoutLogInputResolver{r}
}

// UpdateRoutineExerciseInput returns UpdateRoutineExerciseInputResolver implementation.
func (r *Resolver) UpdateRoutineExerciseInput() UpdateRoutineExerciseInputResolver {
	return &updateRoutineExerciseInputResolver{r}
}

// UpdateWorkoutLogInput returns UpdateWorkoutLogInputResolver implementation.
func (r *Resolver) UpdateWorkoutLogInput() UpdateWorkoutLogInputResolver {
	return &updateWorkoutLogInputResolver{r}
}

type queryResolver struct{ *Resolver }
type routineExerciseResolver struct{ *Resolver }
type workoutLogResolver struct{ *Resolver }
type createRoutineExerciseInputResolver struct{ *Resolver }
type createWorkoutLogInputResolver struct{ *Resolver }
type updateRoutineExerciseInputResolver struct{ *Resolver }
type updateWorkoutLogInputResolver struct{ *Resolver }
