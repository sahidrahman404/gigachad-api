package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	gigachad "github.com/sahidrahman404/gigachad-api"
	"github.com/sahidrahman404/gigachad-api/ent"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/internal/img"
)

// CreateWorkoutWithChildren is the resolver for the createWorkoutWithChildren field.
func (r *mutationResolver) CreateWorkoutWithChildren(ctx context.Context, input gigachad.CreateWorkoutWithChildrenInput) (*ent.Workout, error) {
	userCtx := r.getUserFromCtx(ctx)
	user, err := r.requireActivatedUser(userCtx)
	if err != nil {
		return nil, err
	}

	workoutID := pksuid.MustNew("WO")
	if err := r.WithTx(ctx, func(tx *ent.Tx) error {
		txClient := tx.Client()
		workout, err := txClient.Workout.Create().
			SetID(workoutID).
			SetName(input.Name).
			SetVolume(input.Volume).
			SetDuration(input.Duration).
			SetSets(input.Sets).
			SetImage(img.SetNillableImageField(input.Image, *r.awsCfg, r.imgproxy)).
			SetNillableDescription(input.Description).
			SetUserID(user.ID).
			Save(ctx)
		if err != nil {
			return err
		}
		_, err = txClient.WorkoutLog.MapCreateBulk(
			input.WorkoutLogs,
			func(c *ent.WorkoutLogCreate, i int) {
				c.SetSets(input.WorkoutLogs[i].Sets).
					SetExerciseID(input.WorkoutLogs[i].ExerciseID).
					SetWorkoutID(workout.ID).
					SetUserID(user.ID)
			}).Save(ctx)
		if err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, r.serverError(err)
	}
	return r.client.Workout.Get(ctx, workoutID)
}
