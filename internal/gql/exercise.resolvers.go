package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	gigachad "github.com/sahidrahman404/gigachad-api"
	"github.com/sahidrahman404/gigachad-api/ent"
	"github.com/sahidrahman404/gigachad-api/internal/img"
)

// CreateExercise is the resolver for the createExercise field.
func (r *mutationResolver) CreateExercise(ctx context.Context, input gigachad.CreateExerciseInput) (*ent.Exercise, error) {
	uCtx := r.getUserFromCtx(ctx)

	if uCtx.Ent == nil {
		switch input.HowTo {
		case nil:
			ex, err := r.client.Exercise.Create().
				SetName(input.Name).
				SetImage(img.SetImageField(*input.Image, *r.awsCfg, r.imgproxy)).
				Save(ctx)
			if err != nil {
				return nil, r.serverError(err)
			}
			return ex, nil
		default:
			ex, err := r.client.Exercise.Create().
				SetName(input.Name).
				SetImage(img.SetImageField(*input.Image, *r.awsCfg, r.imgproxy)).
				SetHowTo(*input.HowTo).
				Save(ctx)
			if err != nil {
				return nil, r.serverError(err)
			}
			return ex, nil
		}
	}

	switch input.HowTo {
	case nil:
		ex, err := r.client.Exercise.Create().
			SetName(input.Name).
			SetImage(img.SetImageField(*input.Image, *r.awsCfg, r.imgproxy)).
			SetUserID(uCtx.Ent.ID).
			Save(ctx)
		if err != nil {
			return nil, r.serverError(err)
		}
		return ex, nil
	default:
		ex, err := r.client.Exercise.Create().
			SetName(input.Name).
			SetImage(img.SetImageField(*input.Image, *r.awsCfg, r.imgproxy)).
			SetHowTo(*input.HowTo).
			SetUserID(uCtx.Ent.ID).
			Save(ctx)
		if err != nil {
			return nil, r.serverError(err)
		}
		return ex, nil
	}
}
