package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	gigachad "github.com/sahidrahman404/gigachad-api"
	"github.com/sahidrahman404/gigachad-api/ent"
	"github.com/sahidrahman404/gigachad-api/internal/img"
	"github.com/sahidrahman404/gigachad-api/internal/purifier"
)

// CreateExercise is the resolver for the createExercise field.
func (r *mutationResolver) CreateExercise(ctx context.Context, input gigachad.CreateExerciseInput) (*ent.Exercise, error) {
	uCtx := r.getUserFromCtx(ctx)

	ex, err := r.client.Exercise.Create().
		SetName(input.Name).
		SetImage(img.SetNillableImageField(input.Image, *r.awsCfg, r.imgproxy)).
		SetNillableHowTo(purifier.PurifyHTML(input.HowTo, r.purifier)).
		SetNillableUserID(uCtx.GetUserID()).
		AddMusclesGroupIDs(input.MusclesGroupIDs...).
		AddExerciseTypeIDs(input.ExerciseTypeIDs...).
		Save(ctx)
	if err != nil {
		return nil, r.defaultError(err)
	}
	return ex, nil
}

// DeleteExercise is the resolver for the deleteExercise field.
func (r *mutationResolver) DeleteExercise(ctx context.Context, input gigachad.DeleteExerciseInput) (*ent.Exercise, error) {
	exercise, err := r.client.Exercise.Get(ctx, input.ID)
	if err != nil {
		return nil, r.defaultError(err)
	}

	err = r.client.Exercise.DeleteOneID(input.ID).Exec(ctx)
	if err != nil {
		return nil, r.defaultError(err)
	}

	r.s3Client.DeleteObject(ctx, &s3.DeleteObjectInput{Bucket: &r.awsCfg.AWSBucket, Key: &exercise.Image.Filename})

	return &ent.Exercise{ID: input.ID}, nil
}
