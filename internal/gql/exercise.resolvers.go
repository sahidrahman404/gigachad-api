package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	gigachad "github.com/sahidrahman404/gigachad-api"
	"github.com/sahidrahman404/gigachad-api/ent"
	"github.com/sahidrahman404/gigachad-api/internal/img"
	"github.com/sahidrahman404/gigachad-api/internal/purifier"
)

// CreateExercise is the resolver for the createExercise field.
func (r *mutationResolver) CreateExercise(ctx context.Context, input gigachad.CreateExerciseInput) (*ent.Exercise, error) {
	uCtx := r.getUserFromCtx(ctx)

	if input.Image == nil {
		ex, err := r.client.Exercise.Create().
			SetName(input.Name).
			SetNillableHowTo(purifier.PurifyHTML(input.HowTo, r.purifier)).
			SetNillableUserID(uCtx.GetUserID()).
			AddMusclesGroupIDs(input.MusclesGroupIDs...).
			AddExerciseTypeIDs(input.ExerciseTypeIDs...).
			Save(ctx)
		if err != nil {
			return nil, r.serverError(err)
		}
		return ex, nil
	}

	ex, err := r.client.Exercise.Create().
		SetName(input.Name).
		SetImage(img.SetImageField(*input.Image, *r.awsCfg, r.imgproxy)).
		SetNillableHowTo(purifier.PurifyHTML(input.HowTo, r.purifier)).
		SetNillableUserID(uCtx.GetUserID()).
		AddMusclesGroupIDs(input.MusclesGroupIDs...).
		AddExerciseTypeIDs(input.ExerciseTypeIDs...).
		Save(ctx)
	if err != nil {
		return nil, r.serverError(err)
	}
	return ex, nil
}
