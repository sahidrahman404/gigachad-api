package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"net/http"

	"buf.build/gen/go/sahidrahman/gigachadapis/connectrpc/go/gigachad/v1/gigachadv1connect"
	gigachadv1 "buf.build/gen/go/sahidrahman/gigachadapis/protocolbuffers/go/gigachad/v1"
	"connectrpc.com/connect"
	gigachad "github.com/sahidrahman404/gigachad-api"
	"github.com/sahidrahman404/gigachad-api/ent"
	"github.com/sahidrahman404/gigachad-api/internal/types"
	"github.com/sahidrahman404/gigachad-api/internal/validator"
)

// DeleteRoutine is the resolver for the deleteRoutine field.
func (r *mutationResolver) DeleteRoutine(ctx context.Context, input gigachad.DeleteRoutineInput) (*ent.Routine, error) {
	v := validator.NewValidator()

	routine, err := r.client.Routine.Get(ctx, input.ID)
	if err != nil {
		return nil, r.serverError(err)
	}

	if routine.ReminderID != nil {
		client := gigachadv1connect.NewReminderServiceClient(http.DefaultClient, "http://localhost:8080")
		client.RemoveReminder(ctx, &connect.Request[gigachadv1.RemoveReminderRequest]{
			Msg: &gigachadv1.RemoveReminderRequest{
				ReminderId: *routine.ReminderID,
			},
		})
	}

	err = r.client.Routine.DeleteOneID(input.ID).Exec(ctx)
	if err != nil {
		switch {
		case err.Error() == types.EntRoutineNotFound:
			v.AddFieldError("routine", "a routine with this ID doesn't exist")
			return nil, r.errorMessage(v)
		default:
			return nil, r.serverError(err)
		}
	}
	return routine, nil
}
