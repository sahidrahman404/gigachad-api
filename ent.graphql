directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Equipment implements Node {
  id: ID!
  name: String!
  image: String!
  exercises: [Exercise!]
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
type Exercise implements Node {
  id: ID!
  name: String!
  image: String
  howTo: String
  equipmentID: String
  musclesGroupID: ID
  exerciseTypeID: ID
  userID: ID
  routineExercises: [RoutineExercise!]
  workoutLogs: [WorkoutLog!]
  users: User
  equipments: Equipment
  musclesGroups: MusclesGroup
  exerciseTypes: ExerciseType
}
type ExerciseType implements Node {
  id: ID!
  name: String!
  properties: [String!]!
  description: String!
  exercises: [Exercise!]
}
"""
ExerciseTypeWhereInput is used for filtering ExerciseType objects.
Input was generated by ent.
"""
input ExerciseTypeWhereInput {
  not: ExerciseTypeWhereInput
  and: [ExerciseTypeWhereInput!]
  or: [ExerciseTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
"""
ExerciseWhereInput is used for filtering Exercise objects.
Input was generated by ent.
"""
input ExerciseWhereInput {
  not: ExerciseWhereInput
  and: [ExerciseWhereInput!]
  or: [ExerciseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  """how_to field predicates"""
  howTo: String
  howToNEQ: String
  howToIn: [String!]
  howToNotIn: [String!]
  howToGT: String
  howToGTE: String
  howToLT: String
  howToLTE: String
  howToContains: String
  howToHasPrefix: String
  howToHasSuffix: String
  howToIsNil: Boolean
  howToNotNil: Boolean
  howToEqualFold: String
  howToContainsFold: String
  """equipment_id field predicates"""
  equipmentID: String
  equipmentIDNEQ: String
  equipmentIDIn: [String!]
  equipmentIDNotIn: [String!]
  equipmentIDGT: String
  equipmentIDGTE: String
  equipmentIDLT: String
  equipmentIDLTE: String
  equipmentIDContains: String
  equipmentIDHasPrefix: String
  equipmentIDHasSuffix: String
  equipmentIDIsNil: Boolean
  equipmentIDNotNil: Boolean
  equipmentIDEqualFold: String
  equipmentIDContainsFold: String
  """muscles_group_id field predicates"""
  musclesGroupID: ID
  musclesGroupIDNEQ: ID
  musclesGroupIDIn: [ID!]
  musclesGroupIDNotIn: [ID!]
  musclesGroupIDGT: ID
  musclesGroupIDGTE: ID
  musclesGroupIDLT: ID
  musclesGroupIDLTE: ID
  musclesGroupIDContains: ID
  musclesGroupIDHasPrefix: ID
  musclesGroupIDHasSuffix: ID
  musclesGroupIDIsNil: Boolean
  musclesGroupIDNotNil: Boolean
  musclesGroupIDEqualFold: ID
  musclesGroupIDContainsFold: ID
  """exercise_type_id field predicates"""
  exerciseTypeID: ID
  exerciseTypeIDNEQ: ID
  exerciseTypeIDIn: [ID!]
  exerciseTypeIDNotIn: [ID!]
  exerciseTypeIDGT: ID
  exerciseTypeIDGTE: ID
  exerciseTypeIDLT: ID
  exerciseTypeIDLTE: ID
  exerciseTypeIDContains: ID
  exerciseTypeIDHasPrefix: ID
  exerciseTypeIDHasSuffix: ID
  exerciseTypeIDIsNil: Boolean
  exerciseTypeIDNotNil: Boolean
  exerciseTypeIDEqualFold: ID
  exerciseTypeIDContainsFold: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """equipments edge predicates"""
  hasEquipments: Boolean
  hasEquipmentsWith: [EquipmentWhereInput!]
  """muscles_groups edge predicates"""
  hasMusclesGroups: Boolean
  hasMusclesGroupsWith: [MusclesGroupWhereInput!]
  """exercise_types edge predicates"""
  hasExerciseTypes: Boolean
  hasExerciseTypesWith: [ExerciseTypeWhereInput!]
}
"""The builtin Map type"""
scalar Map
type MusclesGroup implements Node {
  id: ID!
  name: String!
  image: String!
  exercises: [Exercise!]
}
"""
MusclesGroupWhereInput is used for filtering MusclesGroup objects.
Input was generated by ent.
"""
input MusclesGroupWhereInput {
  not: MusclesGroupWhereInput
  and: [MusclesGroupWhereInput!]
  or: [MusclesGroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/sahidrahman404/gigachad-api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Routine implements Node {
  id: ID!
  name: String!
  userID: ID
  routineExercises: [RoutineExercise!]
  users: User
}
type RoutineExercise implements Node {
  id: ID!
  restTimer: Int
  sets: Map!
  routineID: ID
  exerciseID: ID
  userID: ID
  routines: Routine
  exercises: Exercise
  users: User
}
"""
RoutineExerciseWhereInput is used for filtering RoutineExercise objects.
Input was generated by ent.
"""
input RoutineExerciseWhereInput {
  not: RoutineExerciseWhereInput
  and: [RoutineExerciseWhereInput!]
  or: [RoutineExerciseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """rest_timer field predicates"""
  restTimer: Int
  restTimerNEQ: Int
  restTimerIn: [Int!]
  restTimerNotIn: [Int!]
  restTimerGT: Int
  restTimerGTE: Int
  restTimerLT: Int
  restTimerLTE: Int
  restTimerIsNil: Boolean
  restTimerNotNil: Boolean
  """routine_id field predicates"""
  routineID: ID
  routineIDNEQ: ID
  routineIDIn: [ID!]
  routineIDNotIn: [ID!]
  routineIDGT: ID
  routineIDGTE: ID
  routineIDLT: ID
  routineIDLTE: ID
  routineIDContains: ID
  routineIDHasPrefix: ID
  routineIDHasSuffix: ID
  routineIDIsNil: Boolean
  routineIDNotNil: Boolean
  routineIDEqualFold: ID
  routineIDContainsFold: ID
  """exercise_id field predicates"""
  exerciseID: ID
  exerciseIDNEQ: ID
  exerciseIDIn: [ID!]
  exerciseIDNotIn: [ID!]
  exerciseIDGT: ID
  exerciseIDGTE: ID
  exerciseIDLT: ID
  exerciseIDLTE: ID
  exerciseIDContains: ID
  exerciseIDHasPrefix: ID
  exerciseIDHasSuffix: ID
  exerciseIDIsNil: Boolean
  exerciseIDNotNil: Boolean
  exerciseIDEqualFold: ID
  exerciseIDContainsFold: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
RoutineWhereInput is used for filtering Routine objects.
Input was generated by ent.
"""
input RoutineWhereInput {
  not: RoutineWhereInput
  and: [RoutineWhereInput!]
  or: [RoutineWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type Token implements Node {
  id: ID!
  expiry: String!
  scope: String!
  userID: ID
  users: User
}
"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """expiry field predicates"""
  expiry: String
  expiryNEQ: String
  expiryIn: [String!]
  expiryNotIn: [String!]
  expiryGT: String
  expiryGTE: String
  expiryLT: String
  expiryLTE: String
  expiryContains: String
  expiryHasPrefix: String
  expiryHasSuffix: String
  expiryEqualFold: String
  expiryContainsFold: String
  """scope field predicates"""
  scope: String
  scopeNEQ: String
  scopeIn: [String!]
  scopeNotIn: [String!]
  scopeGT: String
  scopeGTE: String
  scopeLT: String
  scopeLTE: String
  scopeContains: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeEqualFold: String
  scopeContainsFold: String
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type User implements Node {
  id: ID!
  email: String!
  username: String!
  hashedPassword: String!
  name: String!
  createdAt: String!
  activated: Int!
  version: Int!
  tokens: [Token!]
  exercises: [Exercise!]
  routines: [Routine!]
  workouts: [Workout!]
  workoutLogs: [WorkoutLog!]
  routineExercises: [RoutineExercise!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """hashed_password field predicates"""
  hashedPassword: String
  hashedPasswordNEQ: String
  hashedPasswordIn: [String!]
  hashedPasswordNotIn: [String!]
  hashedPasswordGT: String
  hashedPasswordGTE: String
  hashedPasswordLT: String
  hashedPasswordLTE: String
  hashedPasswordContains: String
  hashedPasswordHasPrefix: String
  hashedPasswordHasSuffix: String
  hashedPasswordEqualFold: String
  hashedPasswordContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """activated field predicates"""
  activated: Int
  activatedNEQ: Int
  activatedIn: [Int!]
  activatedNotIn: [Int!]
  activatedGT: Int
  activatedGTE: Int
  activatedLT: Int
  activatedLTE: Int
  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  """tokens edge predicates"""
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]
  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]
  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}
type Workout implements Node {
  id: ID!
  name: String!
  volume: Int!
  reps: Int!
  time: String
  sets: Int!
  createdAt: String!
  image: String
  description: String!
  userID: ID
  users: User
  workoutLogs: [WorkoutLog!]
}
type WorkoutLog implements Node {
  id: ID!
  sets: Map!
  createdAt: String!
  exerciseID: ID
  workoutID: ID
  userID: ID
  users: User
  exercises: Exercise
  workouts: Workout
}
"""
WorkoutLogWhereInput is used for filtering WorkoutLog objects.
Input was generated by ent.
"""
input WorkoutLogWhereInput {
  not: WorkoutLogWhereInput
  and: [WorkoutLogWhereInput!]
  or: [WorkoutLogWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """exercise_id field predicates"""
  exerciseID: ID
  exerciseIDNEQ: ID
  exerciseIDIn: [ID!]
  exerciseIDNotIn: [ID!]
  exerciseIDGT: ID
  exerciseIDGTE: ID
  exerciseIDLT: ID
  exerciseIDLTE: ID
  exerciseIDContains: ID
  exerciseIDHasPrefix: ID
  exerciseIDHasSuffix: ID
  exerciseIDIsNil: Boolean
  exerciseIDNotNil: Boolean
  exerciseIDEqualFold: ID
  exerciseIDContainsFold: ID
  """workout_id field predicates"""
  workoutID: ID
  workoutIDNEQ: ID
  workoutIDIn: [ID!]
  workoutIDNotIn: [ID!]
  workoutIDGT: ID
  workoutIDGTE: ID
  workoutIDLT: ID
  workoutIDLTE: ID
  workoutIDContains: ID
  workoutIDHasPrefix: ID
  workoutIDHasSuffix: ID
  workoutIDIsNil: Boolean
  workoutIDNotNil: Boolean
  workoutIDEqualFold: ID
  workoutIDContainsFold: ID
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]
}
"""
WorkoutWhereInput is used for filtering Workout objects.
Input was generated by ent.
"""
input WorkoutWhereInput {
  not: WorkoutWhereInput
  and: [WorkoutWhereInput!]
  or: [WorkoutWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """volume field predicates"""
  volume: Int
  volumeNEQ: Int
  volumeIn: [Int!]
  volumeNotIn: [Int!]
  volumeGT: Int
  volumeGTE: Int
  volumeLT: Int
  volumeLTE: Int
  """reps field predicates"""
  reps: Int
  repsNEQ: Int
  repsIn: [Int!]
  repsNotIn: [Int!]
  repsGT: Int
  repsGTE: Int
  repsLT: Int
  repsLTE: Int
  """time field predicates"""
  time: String
  timeNEQ: String
  timeIn: [String!]
  timeNotIn: [String!]
  timeGT: String
  timeGTE: String
  timeLT: String
  timeLTE: String
  timeContains: String
  timeHasPrefix: String
  timeHasSuffix: String
  timeIsNil: Boolean
  timeNotNil: Boolean
  timeEqualFold: String
  timeContainsFold: String
  """sets field predicates"""
  sets: Int
  setsNEQ: Int
  setsIn: [Int!]
  setsNotIn: [Int!]
  setsGT: Int
  setsGTE: Int
  setsLT: Int
  setsLTE: Int
  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
}
