// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workout"
	"github.com/sahidrahman404/gigachad-api/ent/workoutlog"
)

// WorkoutLogCreate is the builder for creating a WorkoutLog entity.
type WorkoutLogCreate struct {
	config
	mutation *WorkoutLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSets sets the "sets" field.
func (wlc *WorkoutLogCreate) SetSets(s []*schematype.Set) *WorkoutLogCreate {
	wlc.mutation.SetSets(s)
	return wlc
}

// SetCreatedAt sets the "created_at" field.
func (wlc *WorkoutLogCreate) SetCreatedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetCreatedAt(t)
	return wlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableCreatedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetCreatedAt(*t)
	}
	return wlc
}

// SetWorkoutID sets the "workout_id" field.
func (wlc *WorkoutLogCreate) SetWorkoutID(pk pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetWorkoutID(pk)
	return wlc
}

// SetExerciseID sets the "exercise_id" field.
func (wlc *WorkoutLogCreate) SetExerciseID(pk pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetExerciseID(pk)
	return wlc
}

// SetUserID sets the "user_id" field.
func (wlc *WorkoutLogCreate) SetUserID(pk pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetUserID(pk)
	return wlc
}

// SetOrder sets the "order" field.
func (wlc *WorkoutLogCreate) SetOrder(i int) *WorkoutLogCreate {
	wlc.mutation.SetOrder(i)
	return wlc
}

// SetID sets the "id" field.
func (wlc *WorkoutLogCreate) SetID(pk pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetID(pk)
	return wlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableID(pk *pksuid.ID) *WorkoutLogCreate {
	if pk != nil {
		wlc.SetID(*pk)
	}
	return wlc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (wlc *WorkoutLogCreate) SetUsersID(id pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetUsersID(id)
	return wlc
}

// SetUsers sets the "users" edge to the User entity.
func (wlc *WorkoutLogCreate) SetUsers(u *User) *WorkoutLogCreate {
	return wlc.SetUsersID(u.ID)
}

// SetWorkoutsID sets the "workouts" edge to the Workout entity by ID.
func (wlc *WorkoutLogCreate) SetWorkoutsID(id pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetWorkoutsID(id)
	return wlc
}

// SetWorkouts sets the "workouts" edge to the Workout entity.
func (wlc *WorkoutLogCreate) SetWorkouts(w *Workout) *WorkoutLogCreate {
	return wlc.SetWorkoutsID(w.ID)
}

// SetExercisesID sets the "exercises" edge to the Exercise entity by ID.
func (wlc *WorkoutLogCreate) SetExercisesID(id pksuid.ID) *WorkoutLogCreate {
	wlc.mutation.SetExercisesID(id)
	return wlc
}

// SetExercises sets the "exercises" edge to the Exercise entity.
func (wlc *WorkoutLogCreate) SetExercises(e *Exercise) *WorkoutLogCreate {
	return wlc.SetExercisesID(e.ID)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wlc *WorkoutLogCreate) Mutation() *WorkoutLogMutation {
	return wlc.mutation
}

// Save creates the WorkoutLog in the database.
func (wlc *WorkoutLogCreate) Save(ctx context.Context) (*WorkoutLog, error) {
	if err := wlc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wlc.sqlSave, wlc.mutation, wlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wlc *WorkoutLogCreate) SaveX(ctx context.Context) *WorkoutLog {
	v, err := wlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlc *WorkoutLogCreate) Exec(ctx context.Context) error {
	_, err := wlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlc *WorkoutLogCreate) ExecX(ctx context.Context) {
	if err := wlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlc *WorkoutLogCreate) defaults() error {
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		if workoutlog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized workoutlog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := workoutlog.DefaultCreatedAt()
		wlc.mutation.SetCreatedAt(v)
	}
	if _, ok := wlc.mutation.ID(); !ok {
		if workoutlog.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized workoutlog.DefaultID (forgotten import ent/runtime?)")
		}
		v := workoutlog.DefaultID()
		wlc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wlc *WorkoutLogCreate) check() error {
	if _, ok := wlc.mutation.Sets(); !ok {
		return &ValidationError{Name: "sets", err: errors.New(`ent: missing required field "WorkoutLog.sets"`)}
	}
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkoutLog.created_at"`)}
	}
	if _, ok := wlc.mutation.WorkoutID(); !ok {
		return &ValidationError{Name: "workout_id", err: errors.New(`ent: missing required field "WorkoutLog.workout_id"`)}
	}
	if _, ok := wlc.mutation.ExerciseID(); !ok {
		return &ValidationError{Name: "exercise_id", err: errors.New(`ent: missing required field "WorkoutLog.exercise_id"`)}
	}
	if _, ok := wlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "WorkoutLog.user_id"`)}
	}
	if _, ok := wlc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "WorkoutLog.order"`)}
	}
	if _, ok := wlc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "WorkoutLog.users"`)}
	}
	if _, ok := wlc.mutation.WorkoutsID(); !ok {
		return &ValidationError{Name: "workouts", err: errors.New(`ent: missing required edge "WorkoutLog.workouts"`)}
	}
	if _, ok := wlc.mutation.ExercisesID(); !ok {
		return &ValidationError{Name: "exercises", err: errors.New(`ent: missing required edge "WorkoutLog.exercises"`)}
	}
	return nil
}

func (wlc *WorkoutLogCreate) sqlSave(ctx context.Context) (*WorkoutLog, error) {
	if err := wlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pksuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wlc.mutation.id = &_node.ID
	wlc.mutation.done = true
	return _node, nil
}

func (wlc *WorkoutLogCreate) createSpec() (*WorkoutLog, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkoutLog{config: wlc.config}
		_spec = sqlgraph.NewCreateSpec(workoutlog.Table, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString))
	)
	_spec.OnConflict = wlc.conflict
	if id, ok := wlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wlc.mutation.Sets(); ok {
		_spec.SetField(workoutlog.FieldSets, field.TypeJSON, value)
		_node.Sets = value
	}
	if value, ok := wlc.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wlc.mutation.Order(); ok {
		_spec.SetField(workoutlog.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := wlc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UsersTable,
			Columns: []string{workoutlog.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wlc.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workoutlog.WorkoutsTable,
			Columns: []string{workoutlog.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkoutID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wlc.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workoutlog.ExercisesTable,
			Columns: []string{workoutlog.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExerciseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkoutLog.Create().
//		SetSets(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkoutLogUpsert) {
//			SetSets(v+v).
//		}).
//		Exec(ctx)
func (wlc *WorkoutLogCreate) OnConflict(opts ...sql.ConflictOption) *WorkoutLogUpsertOne {
	wlc.conflict = opts
	return &WorkoutLogUpsertOne{
		create: wlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wlc *WorkoutLogCreate) OnConflictColumns(columns ...string) *WorkoutLogUpsertOne {
	wlc.conflict = append(wlc.conflict, sql.ConflictColumns(columns...))
	return &WorkoutLogUpsertOne{
		create: wlc,
	}
}

type (
	// WorkoutLogUpsertOne is the builder for "upsert"-ing
	//  one WorkoutLog node.
	WorkoutLogUpsertOne struct {
		create *WorkoutLogCreate
	}

	// WorkoutLogUpsert is the "OnConflict" setter.
	WorkoutLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetSets sets the "sets" field.
func (u *WorkoutLogUpsert) SetSets(v []*schematype.Set) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldSets, v)
	return u
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateSets() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldSets)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkoutLogUpsert) SetCreatedAt(v time.Time) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateCreatedAt() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldCreatedAt)
	return u
}

// SetWorkoutID sets the "workout_id" field.
func (u *WorkoutLogUpsert) SetWorkoutID(v pksuid.ID) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldWorkoutID, v)
	return u
}

// UpdateWorkoutID sets the "workout_id" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateWorkoutID() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldWorkoutID)
	return u
}

// SetExerciseID sets the "exercise_id" field.
func (u *WorkoutLogUpsert) SetExerciseID(v pksuid.ID) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldExerciseID, v)
	return u
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateExerciseID() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldExerciseID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WorkoutLogUpsert) SetUserID(v pksuid.ID) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateUserID() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldUserID)
	return u
}

// SetOrder sets the "order" field.
func (u *WorkoutLogUpsert) SetOrder(v int) *WorkoutLogUpsert {
	u.Set(workoutlog.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkoutLogUpsert) UpdateOrder() *WorkoutLogUpsert {
	u.SetExcluded(workoutlog.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *WorkoutLogUpsert) AddOrder(v int) *WorkoutLogUpsert {
	u.Add(workoutlog.FieldOrder, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workoutlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkoutLogUpsertOne) UpdateNewValues() *WorkoutLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workoutlog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkoutLogUpsertOne) Ignore() *WorkoutLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkoutLogUpsertOne) DoNothing() *WorkoutLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkoutLogCreate.OnConflict
// documentation for more info.
func (u *WorkoutLogUpsertOne) Update(set func(*WorkoutLogUpsert)) *WorkoutLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkoutLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSets sets the "sets" field.
func (u *WorkoutLogUpsertOne) SetSets(v []*schematype.Set) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetSets(v)
	})
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateSets() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateSets()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkoutLogUpsertOne) SetCreatedAt(v time.Time) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateCreatedAt() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetWorkoutID sets the "workout_id" field.
func (u *WorkoutLogUpsertOne) SetWorkoutID(v pksuid.ID) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetWorkoutID(v)
	})
}

// UpdateWorkoutID sets the "workout_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateWorkoutID() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateWorkoutID()
	})
}

// SetExerciseID sets the "exercise_id" field.
func (u *WorkoutLogUpsertOne) SetExerciseID(v pksuid.ID) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetExerciseID(v)
	})
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateExerciseID() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateExerciseID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkoutLogUpsertOne) SetUserID(v pksuid.ID) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateUserID() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateUserID()
	})
}

// SetOrder sets the "order" field.
func (u *WorkoutLogUpsertOne) SetOrder(v int) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkoutLogUpsertOne) AddOrder(v int) *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkoutLogUpsertOne) UpdateOrder() *WorkoutLogUpsertOne {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *WorkoutLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkoutLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkoutLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkoutLogUpsertOne) ID(ctx context.Context) (id pksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkoutLogUpsertOne.ID is not supported by MySQL driver. Use WorkoutLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkoutLogUpsertOne) IDX(ctx context.Context) pksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkoutLogCreateBulk is the builder for creating many WorkoutLog entities in bulk.
type WorkoutLogCreateBulk struct {
	config
	err      error
	builders []*WorkoutLogCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkoutLog entities in the database.
func (wlcb *WorkoutLogCreateBulk) Save(ctx context.Context) ([]*WorkoutLog, error) {
	if wlcb.err != nil {
		return nil, wlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wlcb.builders))
	nodes := make([]*WorkoutLog, len(wlcb.builders))
	mutators := make([]Mutator, len(wlcb.builders))
	for i := range wlcb.builders {
		func(i int, root context.Context) {
			builder := wlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wlcb *WorkoutLogCreateBulk) SaveX(ctx context.Context) []*WorkoutLog {
	v, err := wlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlcb *WorkoutLogCreateBulk) Exec(ctx context.Context) error {
	_, err := wlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlcb *WorkoutLogCreateBulk) ExecX(ctx context.Context) {
	if err := wlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkoutLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkoutLogUpsert) {
//			SetSets(v+v).
//		}).
//		Exec(ctx)
func (wlcb *WorkoutLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkoutLogUpsertBulk {
	wlcb.conflict = opts
	return &WorkoutLogUpsertBulk{
		create: wlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wlcb *WorkoutLogCreateBulk) OnConflictColumns(columns ...string) *WorkoutLogUpsertBulk {
	wlcb.conflict = append(wlcb.conflict, sql.ConflictColumns(columns...))
	return &WorkoutLogUpsertBulk{
		create: wlcb,
	}
}

// WorkoutLogUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkoutLog nodes.
type WorkoutLogUpsertBulk struct {
	create *WorkoutLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workoutlog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkoutLogUpsertBulk) UpdateNewValues() *WorkoutLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workoutlog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkoutLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkoutLogUpsertBulk) Ignore() *WorkoutLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkoutLogUpsertBulk) DoNothing() *WorkoutLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkoutLogCreateBulk.OnConflict
// documentation for more info.
func (u *WorkoutLogUpsertBulk) Update(set func(*WorkoutLogUpsert)) *WorkoutLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkoutLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetSets sets the "sets" field.
func (u *WorkoutLogUpsertBulk) SetSets(v []*schematype.Set) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetSets(v)
	})
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateSets() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateSets()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkoutLogUpsertBulk) SetCreatedAt(v time.Time) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateCreatedAt() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetWorkoutID sets the "workout_id" field.
func (u *WorkoutLogUpsertBulk) SetWorkoutID(v pksuid.ID) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetWorkoutID(v)
	})
}

// UpdateWorkoutID sets the "workout_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateWorkoutID() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateWorkoutID()
	})
}

// SetExerciseID sets the "exercise_id" field.
func (u *WorkoutLogUpsertBulk) SetExerciseID(v pksuid.ID) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetExerciseID(v)
	})
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateExerciseID() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateExerciseID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkoutLogUpsertBulk) SetUserID(v pksuid.ID) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateUserID() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateUserID()
	})
}

// SetOrder sets the "order" field.
func (u *WorkoutLogUpsertBulk) SetOrder(v int) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *WorkoutLogUpsertBulk) AddOrder(v int) *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *WorkoutLogUpsertBulk) UpdateOrder() *WorkoutLogUpsertBulk {
	return u.Update(func(s *WorkoutLogUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *WorkoutLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkoutLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkoutLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkoutLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
