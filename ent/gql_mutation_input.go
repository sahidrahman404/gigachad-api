// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
)

// CreateExerciseTypeInput represents a mutation input for creating exercisetypes.
type CreateExerciseTypeInput struct {
	Name        string
	Properties  []string
	Description string
	ExerciseIDs []pksuid.ID
}

// Mutate applies the CreateExerciseTypeInput on the ExerciseTypeMutation builder.
func (i *CreateExerciseTypeInput) Mutate(m *ExerciseTypeMutation) {
	m.SetName(i.Name)
	if v := i.Properties; v != nil {
		m.SetProperties(v)
	}
	m.SetDescription(i.Description)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateExerciseTypeInput on the ExerciseTypeCreate builder.
func (c *ExerciseTypeCreate) SetInput(i CreateExerciseTypeInput) *ExerciseTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExerciseTypeInput represents a mutation input for updating exercisetypes.
type UpdateExerciseTypeInput struct {
	Name              *string
	Properties        []string
	AppendProperties  []string
	Description       *string
	ClearExercises    bool
	AddExerciseIDs    []pksuid.ID
	RemoveExerciseIDs []pksuid.ID
}

// Mutate applies the UpdateExerciseTypeInput on the ExerciseTypeMutation builder.
func (i *UpdateExerciseTypeInput) Mutate(m *ExerciseTypeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Properties; v != nil {
		m.SetProperties(v)
	}
	if i.AppendProperties != nil {
		m.AppendProperties(i.Properties)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateExerciseTypeInput on the ExerciseTypeUpdate builder.
func (c *ExerciseTypeUpdate) SetInput(i UpdateExerciseTypeInput) *ExerciseTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExerciseTypeInput on the ExerciseTypeUpdateOne builder.
func (c *ExerciseTypeUpdateOne) SetInput(i UpdateExerciseTypeInput) *ExerciseTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoutineInput represents a mutation input for creating routines.
type CreateRoutineInput struct {
	Name        string
	ExerciseIDs []pksuid.ID
	UsersID     pksuid.ID
}

// Mutate applies the CreateRoutineInput on the RoutineMutation builder.
func (i *CreateRoutineInput) Mutate(m *RoutineMutation) {
	m.SetName(i.Name)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	m.SetUsersID(i.UsersID)
}

// SetInput applies the change-set in the CreateRoutineInput on the RoutineCreate builder.
func (c *RoutineCreate) SetInput(i CreateRoutineInput) *RoutineCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoutineInput represents a mutation input for updating routines.
type UpdateRoutineInput struct {
	Name              *string
	ClearExercises    bool
	AddExerciseIDs    []pksuid.ID
	RemoveExerciseIDs []pksuid.ID
	UsersID           *pksuid.ID
}

// Mutate applies the UpdateRoutineInput on the RoutineMutation builder.
func (i *UpdateRoutineInput) Mutate(m *RoutineMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateRoutineInput on the RoutineUpdate builder.
func (c *RoutineUpdate) SetInput(i UpdateRoutineInput) *RoutineUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoutineInput on the RoutineUpdateOne builder.
func (c *RoutineUpdateOne) SetInput(i UpdateRoutineInput) *RoutineUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email          string
	Username       string
	HashedPassword string
	Name           string
	TokenIDs       []pksuid.ID
	ExerciseIDs    []pksuid.ID
	RoutineIDs     []pksuid.ID
	WorkoutIDs     []pksuid.ID
	WorkoutLogIDs  []pksuid.ID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	m.SetUsername(i.Username)
	m.SetHashedPassword(i.HashedPassword)
	m.SetName(i.Name)
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
	if v := i.WorkoutIDs; len(v) > 0 {
		m.AddWorkoutIDs(v...)
	}
	if v := i.WorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Email               *string
	Username            *string
	HashedPassword      *string
	Name                *string
	ClearTokens         bool
	AddTokenIDs         []pksuid.ID
	RemoveTokenIDs      []pksuid.ID
	ClearExercises      bool
	AddExerciseIDs      []pksuid.ID
	RemoveExerciseIDs   []pksuid.ID
	ClearRoutines       bool
	AddRoutineIDs       []pksuid.ID
	RemoveRoutineIDs    []pksuid.ID
	ClearWorkouts       bool
	AddWorkoutIDs       []pksuid.ID
	RemoveWorkoutIDs    []pksuid.ID
	ClearWorkoutLogs    bool
	AddWorkoutLogIDs    []pksuid.ID
	RemoveWorkoutLogIDs []pksuid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.HashedPassword; v != nil {
		m.SetHashedPassword(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
	if i.ClearRoutines {
		m.ClearRoutines()
	}
	if v := i.AddRoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
	if v := i.RemoveRoutineIDs; len(v) > 0 {
		m.RemoveRoutineIDs(v...)
	}
	if i.ClearWorkouts {
		m.ClearWorkouts()
	}
	if v := i.AddWorkoutIDs; len(v) > 0 {
		m.AddWorkoutIDs(v...)
	}
	if v := i.RemoveWorkoutIDs; len(v) > 0 {
		m.RemoveWorkoutIDs(v...)
	}
	if i.ClearWorkoutLogs {
		m.ClearWorkoutLogs()
	}
	if v := i.AddWorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.RemoveWorkoutLogIDs; len(v) > 0 {
		m.RemoveWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkoutInput represents a mutation input for creating workouts.
type CreateWorkoutInput struct {
	Name          string
	Volume        int
	Reps          int
	Time          *string
	Sets          int
	Image         *string
	Description   string
	UsersID       pksuid.ID
	WorkoutLogIDs []pksuid.ID
}

// Mutate applies the CreateWorkoutInput on the WorkoutMutation builder.
func (i *CreateWorkoutInput) Mutate(m *WorkoutMutation) {
	m.SetName(i.Name)
	m.SetVolume(i.Volume)
	m.SetReps(i.Reps)
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	m.SetSets(i.Sets)
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	m.SetDescription(i.Description)
	m.SetUsersID(i.UsersID)
	if v := i.WorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWorkoutInput on the WorkoutCreate builder.
func (c *WorkoutCreate) SetInput(i CreateWorkoutInput) *WorkoutCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkoutInput represents a mutation input for updating workouts.
type UpdateWorkoutInput struct {
	Name                *string
	Volume              *int
	Reps                *int
	ClearTime           bool
	Time                *string
	Sets                *int
	ClearImage          bool
	Image               *string
	Description         *string
	UsersID             *pksuid.ID
	ClearWorkoutLogs    bool
	AddWorkoutLogIDs    []pksuid.ID
	RemoveWorkoutLogIDs []pksuid.ID
}

// Mutate applies the UpdateWorkoutInput on the WorkoutMutation builder.
func (i *UpdateWorkoutInput) Mutate(m *WorkoutMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Volume; v != nil {
		m.SetVolume(*v)
	}
	if v := i.Reps; v != nil {
		m.SetReps(*v)
	}
	if i.ClearTime {
		m.ClearTime()
	}
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	if v := i.Sets; v != nil {
		m.SetSets(*v)
	}
	if i.ClearImage {
		m.ClearImage()
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if i.ClearWorkoutLogs {
		m.ClearWorkoutLogs()
	}
	if v := i.AddWorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.RemoveWorkoutLogIDs; len(v) > 0 {
		m.RemoveWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWorkoutInput on the WorkoutUpdate builder.
func (c *WorkoutUpdate) SetInput(i UpdateWorkoutInput) *WorkoutUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkoutInput on the WorkoutUpdateOne builder.
func (c *WorkoutUpdateOne) SetInput(i UpdateWorkoutInput) *WorkoutUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
