// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
)

// CreateEquipmentInput represents a mutation input for creating equipmentslice.
type CreateEquipmentInput struct {
	Name        string
	Image       string
	ExerciseIDs []string
}

// Mutate applies the CreateEquipmentInput on the EquipmentMutation builder.
func (i *CreateEquipmentInput) Mutate(m *EquipmentMutation) {
	m.SetName(i.Name)
	m.SetImage(i.Image)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEquipmentInput on the EquipmentCreate builder.
func (c *EquipmentCreate) SetInput(i CreateEquipmentInput) *EquipmentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEquipmentInput represents a mutation input for updating equipmentslice.
type UpdateEquipmentInput struct {
	Name              *string
	Image             *string
	ClearExercises    bool
	AddExerciseIDs    []string
	RemoveExerciseIDs []string
}

// Mutate applies the UpdateEquipmentInput on the EquipmentMutation builder.
func (i *UpdateEquipmentInput) Mutate(m *EquipmentMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEquipmentInput on the EquipmentUpdate builder.
func (c *EquipmentUpdate) SetInput(i UpdateEquipmentInput) *EquipmentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEquipmentInput on the EquipmentUpdateOne builder.
func (c *EquipmentUpdateOne) SetInput(i UpdateEquipmentInput) *EquipmentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateExerciseInput represents a mutation input for creating exercises.
type CreateExerciseInput struct {
	Name            string
	Image           *string
	HowTo           *string
	WorkoutLogIDs   []string
	UsersID         *string
	EquipmentsID    *string
	MusclesGroupsID *string
	ExerciseTypesID *string
	RoutineIDs      []string
}

// Mutate applies the CreateExerciseInput on the ExerciseMutation builder.
func (i *CreateExerciseInput) Mutate(m *ExerciseMutation) {
	m.SetName(i.Name)
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.HowTo; v != nil {
		m.SetHowTo(*v)
	}
	if v := i.WorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if v := i.EquipmentsID; v != nil {
		m.SetEquipmentsID(*v)
	}
	if v := i.MusclesGroupsID; v != nil {
		m.SetMusclesGroupsID(*v)
	}
	if v := i.ExerciseTypesID; v != nil {
		m.SetExerciseTypesID(*v)
	}
	if v := i.RoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
}

// SetInput applies the change-set in the CreateExerciseInput on the ExerciseCreate builder.
func (c *ExerciseCreate) SetInput(i CreateExerciseInput) *ExerciseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExerciseInput represents a mutation input for updating exercises.
type UpdateExerciseInput struct {
	Name                *string
	ClearImage          bool
	Image               *string
	ClearHowTo          bool
	HowTo               *string
	ClearWorkoutLogs    bool
	AddWorkoutLogIDs    []string
	RemoveWorkoutLogIDs []string
	ClearUsers          bool
	UsersID             *string
	ClearEquipments     bool
	EquipmentsID        *string
	ClearMusclesGroups  bool
	MusclesGroupsID     *string
	ClearExerciseTypes  bool
	ExerciseTypesID     *string
	ClearRoutines       bool
	AddRoutineIDs       []string
	RemoveRoutineIDs    []string
}

// Mutate applies the UpdateExerciseInput on the ExerciseMutation builder.
func (i *UpdateExerciseInput) Mutate(m *ExerciseMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearImage {
		m.ClearImage()
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if i.ClearHowTo {
		m.ClearHowTo()
	}
	if v := i.HowTo; v != nil {
		m.SetHowTo(*v)
	}
	if i.ClearWorkoutLogs {
		m.ClearWorkoutLogs()
	}
	if v := i.AddWorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.RemoveWorkoutLogIDs; len(v) > 0 {
		m.RemoveWorkoutLogIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if i.ClearEquipments {
		m.ClearEquipments()
	}
	if v := i.EquipmentsID; v != nil {
		m.SetEquipmentsID(*v)
	}
	if i.ClearMusclesGroups {
		m.ClearMusclesGroups()
	}
	if v := i.MusclesGroupsID; v != nil {
		m.SetMusclesGroupsID(*v)
	}
	if i.ClearExerciseTypes {
		m.ClearExerciseTypes()
	}
	if v := i.ExerciseTypesID; v != nil {
		m.SetExerciseTypesID(*v)
	}
	if i.ClearRoutines {
		m.ClearRoutines()
	}
	if v := i.AddRoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
	if v := i.RemoveRoutineIDs; len(v) > 0 {
		m.RemoveRoutineIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateExerciseInput on the ExerciseUpdate builder.
func (c *ExerciseUpdate) SetInput(i UpdateExerciseInput) *ExerciseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExerciseInput on the ExerciseUpdateOne builder.
func (c *ExerciseUpdateOne) SetInput(i UpdateExerciseInput) *ExerciseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateExerciseTypeInput represents a mutation input for creating exercisetypes.
type CreateExerciseTypeInput struct {
	Name        string
	Properties  []string
	Description string
	ExerciseIDs []string
}

// Mutate applies the CreateExerciseTypeInput on the ExerciseTypeMutation builder.
func (i *CreateExerciseTypeInput) Mutate(m *ExerciseTypeMutation) {
	m.SetName(i.Name)
	if v := i.Properties; v != nil {
		m.SetProperties(v)
	}
	m.SetDescription(i.Description)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateExerciseTypeInput on the ExerciseTypeCreate builder.
func (c *ExerciseTypeCreate) SetInput(i CreateExerciseTypeInput) *ExerciseTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExerciseTypeInput represents a mutation input for updating exercisetypes.
type UpdateExerciseTypeInput struct {
	Name              *string
	Properties        []string
	AppendProperties  []string
	Description       *string
	ClearExercises    bool
	AddExerciseIDs    []string
	RemoveExerciseIDs []string
}

// Mutate applies the UpdateExerciseTypeInput on the ExerciseTypeMutation builder.
func (i *UpdateExerciseTypeInput) Mutate(m *ExerciseTypeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Properties; v != nil {
		m.SetProperties(v)
	}
	if i.AppendProperties != nil {
		m.AppendProperties(i.Properties)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateExerciseTypeInput on the ExerciseTypeUpdate builder.
func (c *ExerciseTypeUpdate) SetInput(i UpdateExerciseTypeInput) *ExerciseTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExerciseTypeInput on the ExerciseTypeUpdateOne builder.
func (c *ExerciseTypeUpdateOne) SetInput(i UpdateExerciseTypeInput) *ExerciseTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMusclesGroupInput represents a mutation input for creating musclesgroups.
type CreateMusclesGroupInput struct {
	Name        string
	Image       string
	ExerciseIDs []string
}

// Mutate applies the CreateMusclesGroupInput on the MusclesGroupMutation builder.
func (i *CreateMusclesGroupInput) Mutate(m *MusclesGroupMutation) {
	m.SetName(i.Name)
	m.SetImage(i.Image)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMusclesGroupInput on the MusclesGroupCreate builder.
func (c *MusclesGroupCreate) SetInput(i CreateMusclesGroupInput) *MusclesGroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMusclesGroupInput represents a mutation input for updating musclesgroups.
type UpdateMusclesGroupInput struct {
	Name              *string
	Image             *string
	ClearExercises    bool
	AddExerciseIDs    []string
	RemoveExerciseIDs []string
}

// Mutate applies the UpdateMusclesGroupInput on the MusclesGroupMutation builder.
func (i *UpdateMusclesGroupInput) Mutate(m *MusclesGroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMusclesGroupInput on the MusclesGroupUpdate builder.
func (c *MusclesGroupUpdate) SetInput(i UpdateMusclesGroupInput) *MusclesGroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMusclesGroupInput on the MusclesGroupUpdateOne builder.
func (c *MusclesGroupUpdateOne) SetInput(i UpdateMusclesGroupInput) *MusclesGroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoutineInput represents a mutation input for creating routines.
type CreateRoutineInput struct {
	Name        string
	ExerciseIDs []string
	UsersID     *string
}

// Mutate applies the CreateRoutineInput on the RoutineMutation builder.
func (i *CreateRoutineInput) Mutate(m *RoutineMutation) {
	m.SetName(i.Name)
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the CreateRoutineInput on the RoutineCreate builder.
func (c *RoutineCreate) SetInput(i CreateRoutineInput) *RoutineCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoutineInput represents a mutation input for updating routines.
type UpdateRoutineInput struct {
	Name              *string
	ClearExercises    bool
	AddExerciseIDs    []string
	RemoveExerciseIDs []string
	ClearUsers        bool
	UsersID           *string
}

// Mutate applies the UpdateRoutineInput on the RoutineMutation builder.
func (i *UpdateRoutineInput) Mutate(m *RoutineMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateRoutineInput on the RoutineUpdate builder.
func (c *RoutineUpdate) SetInput(i UpdateRoutineInput) *RoutineUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoutineInput on the RoutineUpdateOne builder.
func (c *RoutineUpdateOne) SetInput(i UpdateRoutineInput) *RoutineUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoutineExerciseInput represents a mutation input for creating routineexercises.
type CreateRoutineExerciseInput struct {
	RestTimer   *int
	Sets        *schematype.Sets
	RoutinesID  string
	ExercisesID string
	UsersID     *string
}

// Mutate applies the CreateRoutineExerciseInput on the RoutineExerciseMutation builder.
func (i *CreateRoutineExerciseInput) Mutate(m *RoutineExerciseMutation) {
	if v := i.RestTimer; v != nil {
		m.SetRestTimer(*v)
	}
	if v := i.Sets; v != nil {
		m.SetSets(v)
	}
	m.SetRoutinesID(i.RoutinesID)
	m.SetExercisesID(i.ExercisesID)
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the CreateRoutineExerciseInput on the RoutineExerciseCreate builder.
func (c *RoutineExerciseCreate) SetInput(i CreateRoutineExerciseInput) *RoutineExerciseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoutineExerciseInput represents a mutation input for updating routineexercises.
type UpdateRoutineExerciseInput struct {
	ClearRestTimer bool
	RestTimer      *int
	Sets           *schematype.Sets
	RoutinesID     *string
	ExercisesID    *string
	ClearUsers     bool
	UsersID        *string
}

// Mutate applies the UpdateRoutineExerciseInput on the RoutineExerciseMutation builder.
func (i *UpdateRoutineExerciseInput) Mutate(m *RoutineExerciseMutation) {
	if i.ClearRestTimer {
		m.ClearRestTimer()
	}
	if v := i.RestTimer; v != nil {
		m.SetRestTimer(*v)
	}
	if v := i.Sets; v != nil {
		m.SetSets(v)
	}
	if v := i.RoutinesID; v != nil {
		m.SetRoutinesID(*v)
	}
	if v := i.ExercisesID; v != nil {
		m.SetExercisesID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateRoutineExerciseInput on the RoutineExerciseUpdate builder.
func (c *RoutineExerciseUpdate) SetInput(i UpdateRoutineExerciseInput) *RoutineExerciseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoutineExerciseInput on the RoutineExerciseUpdateOne builder.
func (c *RoutineExerciseUpdateOne) SetInput(i UpdateRoutineExerciseInput) *RoutineExerciseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email          string
	Username       string
	HashedPassword string
	Name           string
	TokenIDs       []string
	ExerciseIDs    []string
	RoutineIDs     []string
	WorkoutIDs     []string
	WorkoutLogIDs  []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	m.SetUsername(i.Username)
	m.SetHashedPassword(i.HashedPassword)
	m.SetName(i.Name)
	if v := i.TokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.ExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
	if v := i.WorkoutIDs; len(v) > 0 {
		m.AddWorkoutIDs(v...)
	}
	if v := i.WorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Email               *string
	Username            *string
	HashedPassword      *string
	Name                *string
	ClearTokens         bool
	AddTokenIDs         []string
	RemoveTokenIDs      []string
	ClearExercises      bool
	AddExerciseIDs      []string
	RemoveExerciseIDs   []string
	ClearRoutines       bool
	AddRoutineIDs       []string
	RemoveRoutineIDs    []string
	ClearWorkouts       bool
	AddWorkoutIDs       []string
	RemoveWorkoutIDs    []string
	ClearWorkoutLogs    bool
	AddWorkoutLogIDs    []string
	RemoveWorkoutLogIDs []string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.HashedPassword; v != nil {
		m.SetHashedPassword(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearTokens {
		m.ClearTokens()
	}
	if v := i.AddTokenIDs; len(v) > 0 {
		m.AddTokenIDs(v...)
	}
	if v := i.RemoveTokenIDs; len(v) > 0 {
		m.RemoveTokenIDs(v...)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.AddExerciseIDs; len(v) > 0 {
		m.AddExerciseIDs(v...)
	}
	if v := i.RemoveExerciseIDs; len(v) > 0 {
		m.RemoveExerciseIDs(v...)
	}
	if i.ClearRoutines {
		m.ClearRoutines()
	}
	if v := i.AddRoutineIDs; len(v) > 0 {
		m.AddRoutineIDs(v...)
	}
	if v := i.RemoveRoutineIDs; len(v) > 0 {
		m.RemoveRoutineIDs(v...)
	}
	if i.ClearWorkouts {
		m.ClearWorkouts()
	}
	if v := i.AddWorkoutIDs; len(v) > 0 {
		m.AddWorkoutIDs(v...)
	}
	if v := i.RemoveWorkoutIDs; len(v) > 0 {
		m.RemoveWorkoutIDs(v...)
	}
	if i.ClearWorkoutLogs {
		m.ClearWorkoutLogs()
	}
	if v := i.AddWorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.RemoveWorkoutLogIDs; len(v) > 0 {
		m.RemoveWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkoutInput represents a mutation input for creating workouts.
type CreateWorkoutInput struct {
	Name          string
	Volume        int
	Reps          int
	Time          *string
	Sets          int
	Image         *string
	Description   string
	UsersID       *string
	WorkoutLogIDs []string
}

// Mutate applies the CreateWorkoutInput on the WorkoutMutation builder.
func (i *CreateWorkoutInput) Mutate(m *WorkoutMutation) {
	m.SetName(i.Name)
	m.SetVolume(i.Volume)
	m.SetReps(i.Reps)
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	m.SetSets(i.Sets)
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	m.SetDescription(i.Description)
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if v := i.WorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWorkoutInput on the WorkoutCreate builder.
func (c *WorkoutCreate) SetInput(i CreateWorkoutInput) *WorkoutCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkoutInput represents a mutation input for updating workouts.
type UpdateWorkoutInput struct {
	Name                *string
	Volume              *int
	Reps                *int
	ClearTime           bool
	Time                *string
	Sets                *int
	ClearImage          bool
	Image               *string
	Description         *string
	ClearUsers          bool
	UsersID             *string
	ClearWorkoutLogs    bool
	AddWorkoutLogIDs    []string
	RemoveWorkoutLogIDs []string
}

// Mutate applies the UpdateWorkoutInput on the WorkoutMutation builder.
func (i *UpdateWorkoutInput) Mutate(m *WorkoutMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Volume; v != nil {
		m.SetVolume(*v)
	}
	if v := i.Reps; v != nil {
		m.SetReps(*v)
	}
	if i.ClearTime {
		m.ClearTime()
	}
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	if v := i.Sets; v != nil {
		m.SetSets(*v)
	}
	if i.ClearImage {
		m.ClearImage()
	}
	if v := i.Image; v != nil {
		m.SetImage(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if i.ClearWorkoutLogs {
		m.ClearWorkoutLogs()
	}
	if v := i.AddWorkoutLogIDs; len(v) > 0 {
		m.AddWorkoutLogIDs(v...)
	}
	if v := i.RemoveWorkoutLogIDs; len(v) > 0 {
		m.RemoveWorkoutLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWorkoutInput on the WorkoutUpdate builder.
func (c *WorkoutUpdate) SetInput(i UpdateWorkoutInput) *WorkoutUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkoutInput on the WorkoutUpdateOne builder.
func (c *WorkoutUpdateOne) SetInput(i UpdateWorkoutInput) *WorkoutUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkoutLogInput represents a mutation input for creating workoutlogs.
type CreateWorkoutLogInput struct {
	Sets        *schematype.Sets
	UsersID     *string
	ExercisesID *string
	WorkoutsID  *string
}

// Mutate applies the CreateWorkoutLogInput on the WorkoutLogMutation builder.
func (i *CreateWorkoutLogInput) Mutate(m *WorkoutLogMutation) {
	if v := i.Sets; v != nil {
		m.SetSets(v)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if v := i.ExercisesID; v != nil {
		m.SetExercisesID(*v)
	}
	if v := i.WorkoutsID; v != nil {
		m.SetWorkoutsID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkoutLogInput on the WorkoutLogCreate builder.
func (c *WorkoutLogCreate) SetInput(i CreateWorkoutLogInput) *WorkoutLogCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkoutLogInput represents a mutation input for updating workoutlogs.
type UpdateWorkoutLogInput struct {
	Sets           *schematype.Sets
	ClearUsers     bool
	UsersID        *string
	ClearExercises bool
	ExercisesID    *string
	ClearWorkouts  bool
	WorkoutsID     *string
}

// Mutate applies the UpdateWorkoutLogInput on the WorkoutLogMutation builder.
func (i *UpdateWorkoutLogInput) Mutate(m *WorkoutLogMutation) {
	if v := i.Sets; v != nil {
		m.SetSets(v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
	if i.ClearExercises {
		m.ClearExercises()
	}
	if v := i.ExercisesID; v != nil {
		m.SetExercisesID(*v)
	}
	if i.ClearWorkouts {
		m.ClearWorkouts()
	}
	if v := i.WorkoutsID; v != nil {
		m.SetWorkoutsID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkoutLogInput on the WorkoutLogUpdate builder.
func (c *WorkoutLogUpdate) SetInput(i UpdateWorkoutLogInput) *WorkoutLogUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkoutLogInput on the WorkoutLogUpdateOne builder.
func (c *WorkoutLogUpdateOne) SetInput(i UpdateWorkoutLogInput) *WorkoutLogUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
