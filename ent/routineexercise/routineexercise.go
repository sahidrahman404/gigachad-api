// Code generated by ent, DO NOT EDIT.

package routineexercise

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
)

const (
	// Label holds the string label denoting the routineexercise type in the database.
	Label = "routine_exercise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRestTimer holds the string denoting the rest_timer field in the database.
	FieldRestTimer = "rest_timer"
	// FieldSets holds the string denoting the sets field in the database.
	FieldSets = "sets"
	// FieldRoutineID holds the string denoting the routine_id field in the database.
	FieldRoutineID = "routine_id"
	// FieldExerciseID holds the string denoting the exercise_id field in the database.
	FieldExerciseID = "exercise_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeRoutines holds the string denoting the routines edge name in mutations.
	EdgeRoutines = "routines"
	// EdgeExercises holds the string denoting the exercises edge name in mutations.
	EdgeExercises = "exercises"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the routineexercise in the database.
	Table = "routine_exercises"
	// RoutinesTable is the table that holds the routines relation/edge.
	RoutinesTable = "routine_exercises"
	// RoutinesInverseTable is the table name for the Routine entity.
	// It exists in this package in order to avoid circular dependency with the "routine" package.
	RoutinesInverseTable = "routines"
	// RoutinesColumn is the table column denoting the routines relation/edge.
	RoutinesColumn = "routine_id"
	// ExercisesTable is the table that holds the exercises relation/edge.
	ExercisesTable = "routine_exercises"
	// ExercisesInverseTable is the table name for the Exercise entity.
	// It exists in this package in order to avoid circular dependency with the "exercise" package.
	ExercisesInverseTable = "exercises"
	// ExercisesColumn is the table column denoting the exercises relation/edge.
	ExercisesColumn = "exercise_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "routine_exercises"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
)

// Columns holds all SQL columns for routineexercise fields.
var Columns = []string{
	FieldID,
	FieldRestTimer,
	FieldSets,
	FieldRoutineID,
	FieldExerciseID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pksuid.ID
)

// OrderOption defines the ordering options for the RoutineExercise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRestTimer orders the results by the rest_timer field.
func ByRestTimer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestTimer, opts...).ToFunc()
}

// ByRoutineID orders the results by the routine_id field.
func ByRoutineID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoutineID, opts...).ToFunc()
}

// ByExerciseID orders the results by the exercise_id field.
func ByExerciseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExerciseID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByRoutinesField orders the results by routines field.
func ByRoutinesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutinesStep(), sql.OrderByField(field, opts...))
	}
}

// ByExercisesField orders the results by exercises field.
func ByExercisesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExercisesStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newRoutinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoutinesTable, RoutinesColumn),
	)
}
func newExercisesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExercisesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ExercisesTable, ExercisesColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
