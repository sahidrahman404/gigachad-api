// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
	"github.com/sahidrahman404/gigachad-api/ent/user"
)

// Routine is the model entity for the Routine schema.
type Routine struct {
	config `json:"-"`
	// ID of the ent.
	ID pksuid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ReminderID holds the value of the "reminder_id" field.
	ReminderID *string `json:"reminder_id,omitempty"`
	// Reminders holds the value of the "reminders" field.
	Reminders []*schematype.Reminder `json:"reminders,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID pksuid.ID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoutineQuery when eager-loading is set.
	Edges        RoutineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoutineEdges holds the relations/edges for other nodes in the graph.
type RoutineEdges struct {
	// Exercises holds the value of the exercises edge.
	Exercises []*Exercise `json:"exercises,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// RoutineExercises holds the value of the routine_exercises edge.
	RoutineExercises []*RoutineExercise `json:"routine_exercises,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedExercises        map[string][]*Exercise
	namedRoutineExercises map[string][]*RoutineExercise
}

// ExercisesOrErr returns the Exercises value or an error if the edge
// was not loaded in eager-loading.
func (e RoutineEdges) ExercisesOrErr() ([]*Exercise, error) {
	if e.loadedTypes[0] {
		return e.Exercises, nil
	}
	return nil, &NotLoadedError{edge: "exercises"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RoutineExercisesOrErr returns the RoutineExercises value or an error if the edge
// was not loaded in eager-loading.
func (e RoutineEdges) RoutineExercisesOrErr() ([]*RoutineExercise, error) {
	if e.loadedTypes[2] {
		return e.RoutineExercises, nil
	}
	return nil, &NotLoadedError{edge: "routine_exercises"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Routine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case routine.FieldReminders:
			values[i] = new([]byte)
		case routine.FieldID, routine.FieldUserID:
			values[i] = new(pksuid.ID)
		case routine.FieldName, routine.FieldReminderID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Routine fields.
func (r *Routine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routine.FieldID:
			if value, ok := values[i].(*pksuid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case routine.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case routine.FieldReminderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reminder_id", values[i])
			} else if value.Valid {
				r.ReminderID = new(string)
				*r.ReminderID = value.String
			}
		case routine.FieldReminders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reminders", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Reminders); err != nil {
					return fmt.Errorf("unmarshal field reminders: %w", err)
				}
			}
		case routine.FieldUserID:
			if value, ok := values[i].(*pksuid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				r.UserID = *value
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Routine.
// This includes values selected through modifiers, order, etc.
func (r *Routine) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryExercises queries the "exercises" edge of the Routine entity.
func (r *Routine) QueryExercises() *ExerciseQuery {
	return NewRoutineClient(r.config).QueryExercises(r)
}

// QueryUsers queries the "users" edge of the Routine entity.
func (r *Routine) QueryUsers() *UserQuery {
	return NewRoutineClient(r.config).QueryUsers(r)
}

// QueryRoutineExercises queries the "routine_exercises" edge of the Routine entity.
func (r *Routine) QueryRoutineExercises() *RoutineExerciseQuery {
	return NewRoutineClient(r.config).QueryRoutineExercises(r)
}

// Update returns a builder for updating this Routine.
// Note that you need to call Routine.Unwrap() before calling this method if this Routine
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Routine) Update() *RoutineUpdateOne {
	return NewRoutineClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Routine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Routine) Unwrap() *Routine {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Routine is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Routine) String() string {
	var builder strings.Builder
	builder.WriteString("Routine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	if v := r.ReminderID; v != nil {
		builder.WriteString("reminder_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("reminders=")
	builder.WriteString(fmt.Sprintf("%v", r.Reminders))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedExercises returns the Exercises named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Routine) NamedExercises(name string) ([]*Exercise, error) {
	if r.Edges.namedExercises == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedExercises[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Routine) appendNamedExercises(name string, edges ...*Exercise) {
	if r.Edges.namedExercises == nil {
		r.Edges.namedExercises = make(map[string][]*Exercise)
	}
	if len(edges) == 0 {
		r.Edges.namedExercises[name] = []*Exercise{}
	} else {
		r.Edges.namedExercises[name] = append(r.Edges.namedExercises[name], edges...)
	}
}

// NamedRoutineExercises returns the RoutineExercises named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Routine) NamedRoutineExercises(name string) ([]*RoutineExercise, error) {
	if r.Edges.namedRoutineExercises == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRoutineExercises[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Routine) appendNamedRoutineExercises(name string, edges ...*RoutineExercise) {
	if r.Edges.namedRoutineExercises == nil {
		r.Edges.namedRoutineExercises = make(map[string][]*RoutineExercise)
	}
	if len(edges) == 0 {
		r.Edges.namedRoutineExercises[name] = []*RoutineExercise{}
	} else {
		r.Edges.namedRoutineExercises[name] = append(r.Edges.namedRoutineExercises[name], edges...)
	}
}

// Routines is a parsable slice of Routine.
type Routines []*Routine
