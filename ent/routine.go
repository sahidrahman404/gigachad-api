// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/user"
)

// Routine is the model entity for the Routine schema.
type Routine struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoutineQuery when eager-loading is set.
	Edges        RoutineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoutineEdges holds the relations/edges for other nodes in the graph.
type RoutineEdges struct {
	// RoutineExercises holds the value of the routine_exercises edge.
	RoutineExercises []*RoutineExercise `json:"routine_exercises,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoutineExercisesOrErr returns the RoutineExercises value or an error if the edge
// was not loaded in eager-loading.
func (e RoutineEdges) RoutineExercisesOrErr() ([]*RoutineExercise, error) {
	if e.loadedTypes[0] {
		return e.RoutineExercises, nil
	}
	return nil, &NotLoadedError{edge: "routine_exercises"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoutineEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Users == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Routine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case routine.FieldID, routine.FieldName, routine.FieldUserID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Routine fields.
func (r *Routine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case routine.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case routine.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case routine.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Routine.
// This includes values selected through modifiers, order, etc.
func (r *Routine) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRoutineExercises queries the "routine_exercises" edge of the Routine entity.
func (r *Routine) QueryRoutineExercises() *RoutineExerciseQuery {
	return NewRoutineClient(r.config).QueryRoutineExercises(r)
}

// QueryUsers queries the "users" edge of the Routine entity.
func (r *Routine) QueryUsers() *UserQuery {
	return NewRoutineClient(r.config).QueryUsers(r)
}

// Update returns a builder for updating this Routine.
// Note that you need to call Routine.Unwrap() before calling this method if this Routine
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Routine) Update() *RoutineUpdateOne {
	return NewRoutineClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Routine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Routine) Unwrap() *Routine {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Routine is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Routine) String() string {
	var builder strings.Builder
	builder.WriteString("Routine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(r.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// Routines is a parsable slice of Routine.
type Routines []*Routine
