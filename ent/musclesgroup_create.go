// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/musclesgroup"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
)

// MusclesGroupCreate is the builder for creating a MusclesGroup entity.
type MusclesGroupCreate struct {
	config
	mutation *MusclesGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mgc *MusclesGroupCreate) SetName(s string) *MusclesGroupCreate {
	mgc.mutation.SetName(s)
	return mgc
}

// SetImage sets the "image" field.
func (mgc *MusclesGroupCreate) SetImage(s schematype.Image) *MusclesGroupCreate {
	mgc.mutation.SetImage(s)
	return mgc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mgc *MusclesGroupCreate) SetNillableImage(s *schematype.Image) *MusclesGroupCreate {
	if s != nil {
		mgc.SetImage(*s)
	}
	return mgc
}

// SetID sets the "id" field.
func (mgc *MusclesGroupCreate) SetID(pk pksuid.ID) *MusclesGroupCreate {
	mgc.mutation.SetID(pk)
	return mgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mgc *MusclesGroupCreate) SetNillableID(pk *pksuid.ID) *MusclesGroupCreate {
	if pk != nil {
		mgc.SetID(*pk)
	}
	return mgc
}

// AddExerciseIDs adds the "exercises" edge to the Exercise entity by IDs.
func (mgc *MusclesGroupCreate) AddExerciseIDs(ids ...pksuid.ID) *MusclesGroupCreate {
	mgc.mutation.AddExerciseIDs(ids...)
	return mgc
}

// AddExercises adds the "exercises" edges to the Exercise entity.
func (mgc *MusclesGroupCreate) AddExercises(e ...*Exercise) *MusclesGroupCreate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mgc.AddExerciseIDs(ids...)
}

// Mutation returns the MusclesGroupMutation object of the builder.
func (mgc *MusclesGroupCreate) Mutation() *MusclesGroupMutation {
	return mgc.mutation
}

// Save creates the MusclesGroup in the database.
func (mgc *MusclesGroupCreate) Save(ctx context.Context) (*MusclesGroup, error) {
	mgc.defaults()
	return withHooks(ctx, mgc.sqlSave, mgc.mutation, mgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mgc *MusclesGroupCreate) SaveX(ctx context.Context) *MusclesGroup {
	v, err := mgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgc *MusclesGroupCreate) Exec(ctx context.Context) error {
	_, err := mgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgc *MusclesGroupCreate) ExecX(ctx context.Context) {
	if err := mgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mgc *MusclesGroupCreate) defaults() {
	if _, ok := mgc.mutation.ID(); !ok {
		v := musclesgroup.DefaultID()
		mgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mgc *MusclesGroupCreate) check() error {
	if _, ok := mgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MusclesGroup.name"`)}
	}
	return nil
}

func (mgc *MusclesGroupCreate) sqlSave(ctx context.Context) (*MusclesGroup, error) {
	if err := mgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pksuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mgc.mutation.id = &_node.ID
	mgc.mutation.done = true
	return _node, nil
}

func (mgc *MusclesGroupCreate) createSpec() (*MusclesGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &MusclesGroup{config: mgc.config}
		_spec = sqlgraph.NewCreateSpec(musclesgroup.Table, sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString))
	)
	_spec.OnConflict = mgc.conflict
	if id, ok := mgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mgc.mutation.Name(); ok {
		_spec.SetField(musclesgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mgc.mutation.Image(); ok {
		_spec.SetField(musclesgroup.FieldImage, field.TypeJSON, value)
		_node.Image = value
	}
	if nodes := mgc.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   musclesgroup.ExercisesTable,
			Columns: musclesgroup.ExercisesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MusclesGroup.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MusclesGroupUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mgc *MusclesGroupCreate) OnConflict(opts ...sql.ConflictOption) *MusclesGroupUpsertOne {
	mgc.conflict = opts
	return &MusclesGroupUpsertOne{
		create: mgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mgc *MusclesGroupCreate) OnConflictColumns(columns ...string) *MusclesGroupUpsertOne {
	mgc.conflict = append(mgc.conflict, sql.ConflictColumns(columns...))
	return &MusclesGroupUpsertOne{
		create: mgc,
	}
}

type (
	// MusclesGroupUpsertOne is the builder for "upsert"-ing
	//  one MusclesGroup node.
	MusclesGroupUpsertOne struct {
		create *MusclesGroupCreate
	}

	// MusclesGroupUpsert is the "OnConflict" setter.
	MusclesGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *MusclesGroupUpsert) SetName(v string) *MusclesGroupUpsert {
	u.Set(musclesgroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MusclesGroupUpsert) UpdateName() *MusclesGroupUpsert {
	u.SetExcluded(musclesgroup.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *MusclesGroupUpsert) SetImage(v schematype.Image) *MusclesGroupUpsert {
	u.Set(musclesgroup.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *MusclesGroupUpsert) UpdateImage() *MusclesGroupUpsert {
	u.SetExcluded(musclesgroup.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *MusclesGroupUpsert) ClearImage() *MusclesGroupUpsert {
	u.SetNull(musclesgroup.FieldImage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(musclesgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MusclesGroupUpsertOne) UpdateNewValues() *MusclesGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(musclesgroup.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MusclesGroupUpsertOne) Ignore() *MusclesGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MusclesGroupUpsertOne) DoNothing() *MusclesGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MusclesGroupCreate.OnConflict
// documentation for more info.
func (u *MusclesGroupUpsertOne) Update(set func(*MusclesGroupUpsert)) *MusclesGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MusclesGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MusclesGroupUpsertOne) SetName(v string) *MusclesGroupUpsertOne {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MusclesGroupUpsertOne) UpdateName() *MusclesGroupUpsertOne {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *MusclesGroupUpsertOne) SetImage(v schematype.Image) *MusclesGroupUpsertOne {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *MusclesGroupUpsertOne) UpdateImage() *MusclesGroupUpsertOne {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *MusclesGroupUpsertOne) ClearImage() *MusclesGroupUpsertOne {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *MusclesGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MusclesGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MusclesGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MusclesGroupUpsertOne) ID(ctx context.Context) (id pksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MusclesGroupUpsertOne.ID is not supported by MySQL driver. Use MusclesGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MusclesGroupUpsertOne) IDX(ctx context.Context) pksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MusclesGroupCreateBulk is the builder for creating many MusclesGroup entities in bulk.
type MusclesGroupCreateBulk struct {
	config
	err      error
	builders []*MusclesGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the MusclesGroup entities in the database.
func (mgcb *MusclesGroupCreateBulk) Save(ctx context.Context) ([]*MusclesGroup, error) {
	if mgcb.err != nil {
		return nil, mgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mgcb.builders))
	nodes := make([]*MusclesGroup, len(mgcb.builders))
	mutators := make([]Mutator, len(mgcb.builders))
	for i := range mgcb.builders {
		func(i int, root context.Context) {
			builder := mgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MusclesGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mgcb *MusclesGroupCreateBulk) SaveX(ctx context.Context) []*MusclesGroup {
	v, err := mgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgcb *MusclesGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := mgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgcb *MusclesGroupCreateBulk) ExecX(ctx context.Context) {
	if err := mgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MusclesGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MusclesGroupUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mgcb *MusclesGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *MusclesGroupUpsertBulk {
	mgcb.conflict = opts
	return &MusclesGroupUpsertBulk{
		create: mgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mgcb *MusclesGroupCreateBulk) OnConflictColumns(columns ...string) *MusclesGroupUpsertBulk {
	mgcb.conflict = append(mgcb.conflict, sql.ConflictColumns(columns...))
	return &MusclesGroupUpsertBulk{
		create: mgcb,
	}
}

// MusclesGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of MusclesGroup nodes.
type MusclesGroupUpsertBulk struct {
	create *MusclesGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(musclesgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MusclesGroupUpsertBulk) UpdateNewValues() *MusclesGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(musclesgroup.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MusclesGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MusclesGroupUpsertBulk) Ignore() *MusclesGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MusclesGroupUpsertBulk) DoNothing() *MusclesGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MusclesGroupCreateBulk.OnConflict
// documentation for more info.
func (u *MusclesGroupUpsertBulk) Update(set func(*MusclesGroupUpsert)) *MusclesGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MusclesGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MusclesGroupUpsertBulk) SetName(v string) *MusclesGroupUpsertBulk {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MusclesGroupUpsertBulk) UpdateName() *MusclesGroupUpsertBulk {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *MusclesGroupUpsertBulk) SetImage(v schematype.Image) *MusclesGroupUpsertBulk {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *MusclesGroupUpsertBulk) UpdateImage() *MusclesGroupUpsertBulk {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *MusclesGroupUpsertBulk) ClearImage() *MusclesGroupUpsertBulk {
	return u.Update(func(s *MusclesGroupUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *MusclesGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MusclesGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MusclesGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MusclesGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
