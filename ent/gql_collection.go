// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EquipmentQuery) CollectFields(ctx context.Context, satisfies ...string) (*EquipmentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EquipmentQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type equipmentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EquipmentPaginateOption
}

func newEquipmentPaginateArgs(rv map[string]interface{}) *equipmentPaginateArgs {
	args := &equipmentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EquipmentWhereInput); ok {
		args.opts = append(args.opts, WithEquipmentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *ExerciseQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExerciseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *ExerciseQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &RoutineExerciseQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WorkoutLogQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.withUsers = query
		case "equipments":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &EquipmentQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.withEquipments = query
		case "musclesGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &MusclesGroupQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.withMusclesGroups = query
		case "exerciseTypes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseTypeQuery{config: e.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			e.withExerciseTypes = query
		}
	}
	return nil
}

type exercisePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExercisePaginateOption
}

func newExercisePaginateArgs(rv map[string]interface{}) *exercisePaginateArgs {
	args := &exercisePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ExerciseWhereInput); ok {
		args.opts = append(args.opts, WithExerciseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (et *ExerciseTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExerciseTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return et, nil
	}
	if err := et.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return et, nil
}

func (et *ExerciseTypeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: et.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			et.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type exercisetypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExerciseTypePaginateOption
}

func newExerciseTypePaginateArgs(rv map[string]interface{}) *exercisetypePaginateArgs {
	args := &exercisetypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*ExerciseTypeWhereInput); ok {
		args.opts = append(args.opts, WithExerciseTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mg *MusclesGroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*MusclesGroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return mg, nil
	}
	if err := mg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return mg, nil
}

func (mg *MusclesGroupQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: mg.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			mg.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type musclesgroupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MusclesGroupPaginateOption
}

func newMusclesGroupPaginateArgs(rv map[string]interface{}) *musclesgroupPaginateArgs {
	args := &musclesgroupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*MusclesGroupWhereInput); ok {
		args.opts = append(args.opts, WithMusclesGroupFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RoutineQuery) CollectFields(ctx context.Context, satisfies ...string) (*RoutineQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RoutineQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &RoutineExerciseQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: r.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			r.withUsers = query
		}
	}
	return nil
}

type routinePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RoutinePaginateOption
}

func newRoutinePaginateArgs(rv map[string]interface{}) *routinePaginateArgs {
	args := &routinePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*RoutineWhereInput); ok {
		args.opts = append(args.opts, WithRoutineFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (re *RoutineExerciseQuery) CollectFields(ctx context.Context, satisfies ...string) (*RoutineExerciseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return re, nil
	}
	if err := re.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return re, nil
}

func (re *RoutineExerciseQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "routines":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &RoutineQuery{config: re.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			re.withRoutines = query
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: re.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			re.withExercises = query
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: re.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			re.withUsers = query
		}
	}
	return nil
}

type routineexercisePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RoutineExercisePaginateOption
}

func newRoutineExercisePaginateArgs(rv map[string]interface{}) *routineexercisePaginateArgs {
	args := &routineexercisePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*RoutineExerciseWhereInput); ok {
		args.opts = append(args.opts, WithRoutineExerciseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*TokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TokenQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: t.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			t.withUsers = query
		}
	}
	return nil
}

type tokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TokenPaginateOption
}

func newTokenPaginateArgs(rv map[string]interface{}) *tokenPaginateArgs {
	args := &tokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*TokenWhereInput); ok {
		args.opts = append(args.opts, WithTokenFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "tokens":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &TokenQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedTokens(alias, func(wq *TokenQuery) {
				*wq = *query
			})
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "routines":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &RoutineQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedRoutines(alias, func(wq *RoutineQuery) {
				*wq = *query
			})
		case "workouts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WorkoutQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedWorkouts(alias, func(wq *WorkoutQuery) {
				*wq = *query
			})
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WorkoutLogQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &RoutineExerciseQuery{config: u.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkoutQuery) CollectFields(ctx context.Context, satisfies ...string) (*WorkoutQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WorkoutQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: w.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			w.withUsers = query
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WorkoutLogQuery{config: w.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			w.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		}
	}
	return nil
}

type workoutPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WorkoutPaginateOption
}

func newWorkoutPaginateArgs(rv map[string]interface{}) *workoutPaginateArgs {
	args := &workoutPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WorkoutWhereInput); ok {
		args.opts = append(args.opts, WithWorkoutFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wl *WorkoutLogQuery) CollectFields(ctx context.Context, satisfies ...string) (*WorkoutLogQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return wl, nil
	}
	if err := wl.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return wl, nil
}

func (wl *WorkoutLogQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &UserQuery{config: wl.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			wl.withUsers = query
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &ExerciseQuery{config: wl.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			wl.withExercises = query
		case "workouts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &WorkoutQuery{config: wl.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			wl.withWorkouts = query
		}
	}
	return nil
}

type workoutlogPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WorkoutLogPaginateOption
}

func newWorkoutLogPaginateArgs(rv map[string]interface{}) *workoutlogPaginateArgs {
	args := &workoutlogPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*WorkoutLogWhereInput); ok {
		args.opts = append(args.opts, WithWorkoutLogFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
