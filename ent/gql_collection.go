// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/sahidrahman404/gigachad-api/ent/equipment"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/exercisetype"
	"github.com/sahidrahman404/gigachad-api/ent/musclesgroup"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/routineexercise"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/token"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workout"
	"github.com/sahidrahman404/gigachad-api/ent/workoutlog"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *EquipmentQuery) CollectFields(ctx context.Context, satisfies ...string) (*EquipmentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *EquipmentQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(equipment.Columns))
		selectedFields = []string{equipment.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: e.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Equipment) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"equipment_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(equipment.ExercisesTable)
							s.Join(joinT).On(s.C(exercise.FieldID), joinT.C(equipment.ExercisesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(equipment.ExercisesPrimaryKey[0]), ids...))
							s.Select(joinT.C(equipment.ExercisesPrimaryKey[0]), sql.As(sql.Count("*"), "count"))
							s.GroupBy(joinT.C(equipment.ExercisesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Equipment) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(equipment.ExercisesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[equipment.FieldName]; !ok {
				selectedFields = append(selectedFields, equipment.FieldName)
				fieldSeen[equipment.FieldName] = struct{}{}
			}
		case "image":
			if _, ok := fieldSeen[equipment.FieldImage]; !ok {
				selectedFields = append(selectedFields, equipment.FieldImage)
				fieldSeen[equipment.FieldImage] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type equipmentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EquipmentPaginateOption
}

func newEquipmentPaginateArgs(rv map[string]any) *equipmentPaginateArgs {
	args := &equipmentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &EquipmentOrder{Field: &EquipmentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithEquipmentOrder(order))
			}
		case *EquipmentOrder:
			if v != nil {
				args.opts = append(args.opts, WithEquipmentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*EquipmentWhereInput); ok {
		args.opts = append(args.opts, WithEquipmentFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (e *ExerciseQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExerciseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return e, nil
	}
	if err := e.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return e, nil
}

func (e *ExerciseQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(exercise.Columns))
		selectedFields = []string{exercise.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: e.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			e.withUsers = query
			if _, ok := fieldSeen[exercise.FieldUserID]; !ok {
				selectedFields = append(selectedFields, exercise.FieldUserID)
				fieldSeen[exercise.FieldUserID] = struct{}{}
			}
		case "equipment":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EquipmentClient{config: e.config}).Query()
			)
			args := newEquipmentPaginateArgs(fieldArgs(ctx, new(EquipmentWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newEquipmentPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercise.EquipmentTable)
							s.Join(joinT).On(s.C(equipment.FieldID), joinT.C(exercise.EquipmentPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(exercise.EquipmentPrimaryKey[1]), ids...))
							s.Select(joinT.C(exercise.EquipmentPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(exercise.EquipmentPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Equipment)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, equipmentImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.EquipmentPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedEquipment(alias, func(wq *EquipmentQuery) {
				*wq = *query
			})
		case "musclesGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MusclesGroupClient{config: e.config}).Query()
			)
			args := newMusclesGroupPaginateArgs(fieldArgs(ctx, new(MusclesGroupWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newMusclesGroupPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercise.MusclesGroupsTable)
							s.Join(joinT).On(s.C(musclesgroup.FieldID), joinT.C(exercise.MusclesGroupsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(exercise.MusclesGroupsPrimaryKey[1]), ids...))
							s.Select(joinT.C(exercise.MusclesGroupsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(exercise.MusclesGroupsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.MusclesGroups)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, musclesgroupImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.MusclesGroupsPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedMusclesGroups(alias, func(wq *MusclesGroupQuery) {
				*wq = *query
			})
		case "exerciseTypes":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseTypeClient{config: e.config}).Query()
			)
			args := newExerciseTypePaginateArgs(fieldArgs(ctx, new(ExerciseTypeWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExerciseTypePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercise.ExerciseTypesTable)
							s.Join(joinT).On(s.C(exercisetype.FieldID), joinT.C(exercise.ExerciseTypesPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(exercise.ExerciseTypesPrimaryKey[1]), ids...))
							s.Select(joinT.C(exercise.ExerciseTypesPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(exercise.ExerciseTypesPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.ExerciseTypes)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exercisetypeImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.ExerciseTypesPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedExerciseTypes(alias, func(wq *ExerciseTypeQuery) {
				*wq = *query
			})
		case "routines":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineClient{config: e.config}).Query()
			)
			args := newRoutinePaginateArgs(fieldArgs(ctx, new(RoutineWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newRoutinePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercise.RoutinesTable)
							s.Join(joinT).On(s.C(routine.FieldID), joinT.C(exercise.RoutinesPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(exercise.RoutinesPrimaryKey[1]), ids...))
							s.Select(joinT.C(exercise.RoutinesPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(exercise.RoutinesPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Routines)
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, routineImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.RoutinesPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedRoutines(alias, func(wq *RoutineQuery) {
				*wq = *query
			})
		case "workouts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutClient{config: e.config}).Query()
			)
			args := newWorkoutPaginateArgs(fieldArgs(ctx, new(WorkoutWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newWorkoutPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercise.WorkoutsTable)
							s.Join(joinT).On(s.C(workout.FieldID), joinT.C(exercise.WorkoutsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(exercise.WorkoutsPrimaryKey[1]), ids...))
							s.Select(joinT.C(exercise.WorkoutsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(exercise.WorkoutsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Workouts)
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, workoutImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.WorkoutsPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedWorkouts(alias, func(wq *WorkoutQuery) {
				*wq = *query
			})
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineExerciseClient{config: e.config}).Query()
			)
			args := newRoutineExercisePaginateArgs(fieldArgs(ctx, new(RoutineExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newRoutineExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(exercise.RoutineExercisesColumn), ids...))
						})
						if err := query.GroupBy(exercise.RoutineExercisesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[6] == nil {
								nodes[i].Edges.totalCount[6] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[6][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.RoutineExercises)
							if nodes[i].Edges.totalCount[6] == nil {
								nodes[i].Edges.totalCount[6] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[6][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, routineexerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.RoutineExercisesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutLogClient{config: e.config}).Query()
			)
			args := newWorkoutLogPaginateArgs(fieldArgs(ctx, new(WorkoutLogWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newWorkoutLogPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					e.loadTotal = append(e.loadTotal, func(ctx context.Context, nodes []*Exercise) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(exercise.WorkoutLogsColumn), ids...))
						})
						if err := query.GroupBy(exercise.WorkoutLogsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[7] == nil {
								nodes[i].Edges.totalCount[7] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[7][alias] = n
						}
						return nil
					})
				} else {
					e.loadTotal = append(e.loadTotal, func(_ context.Context, nodes []*Exercise) error {
						for i := range nodes {
							n := len(nodes[i].Edges.WorkoutLogs)
							if nodes[i].Edges.totalCount[7] == nil {
								nodes[i].Edges.totalCount[7] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[7][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, workoutlogImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercise.WorkoutLogsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			e.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[exercise.FieldName]; !ok {
				selectedFields = append(selectedFields, exercise.FieldName)
				fieldSeen[exercise.FieldName] = struct{}{}
			}
		case "image":
			if _, ok := fieldSeen[exercise.FieldImage]; !ok {
				selectedFields = append(selectedFields, exercise.FieldImage)
				fieldSeen[exercise.FieldImage] = struct{}{}
			}
		case "howTo":
			if _, ok := fieldSeen[exercise.FieldHowTo]; !ok {
				selectedFields = append(selectedFields, exercise.FieldHowTo)
				fieldSeen[exercise.FieldHowTo] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[exercise.FieldUserID]; !ok {
				selectedFields = append(selectedFields, exercise.FieldUserID)
				fieldSeen[exercise.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		e.Select(selectedFields...)
	}
	return nil
}

type exercisePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExercisePaginateOption
}

func newExercisePaginateArgs(rv map[string]any) *exercisePaginateArgs {
	args := &exercisePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ExerciseOrder{Field: &ExerciseOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithExerciseOrder(order))
			}
		case *ExerciseOrder:
			if v != nil {
				args.opts = append(args.opts, WithExerciseOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ExerciseWhereInput); ok {
		args.opts = append(args.opts, WithExerciseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (et *ExerciseTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*ExerciseTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return et, nil
	}
	if err := et.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return et, nil
}

func (et *ExerciseTypeQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(exercisetype.Columns))
		selectedFields = []string{exercisetype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: et.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					et.loadTotal = append(et.loadTotal, func(ctx context.Context, nodes []*ExerciseType) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"exercise_type_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(exercisetype.ExercisesTable)
							s.Join(joinT).On(s.C(exercise.FieldID), joinT.C(exercisetype.ExercisesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(exercisetype.ExercisesPrimaryKey[0]), ids...))
							s.Select(joinT.C(exercisetype.ExercisesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(exercisetype.ExercisesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					et.loadTotal = append(et.loadTotal, func(_ context.Context, nodes []*ExerciseType) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(exercisetype.ExercisesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			et.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[exercisetype.FieldName]; !ok {
				selectedFields = append(selectedFields, exercisetype.FieldName)
				fieldSeen[exercisetype.FieldName] = struct{}{}
			}
		case "properties":
			if _, ok := fieldSeen[exercisetype.FieldProperties]; !ok {
				selectedFields = append(selectedFields, exercisetype.FieldProperties)
				fieldSeen[exercisetype.FieldProperties] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[exercisetype.FieldDescription]; !ok {
				selectedFields = append(selectedFields, exercisetype.FieldDescription)
				fieldSeen[exercisetype.FieldDescription] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		et.Select(selectedFields...)
	}
	return nil
}

type exercisetypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ExerciseTypePaginateOption
}

func newExerciseTypePaginateArgs(rv map[string]any) *exercisetypePaginateArgs {
	args := &exercisetypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ExerciseTypeOrder{Field: &ExerciseTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithExerciseTypeOrder(order))
			}
		case *ExerciseTypeOrder:
			if v != nil {
				args.opts = append(args.opts, WithExerciseTypeOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ExerciseTypeWhereInput); ok {
		args.opts = append(args.opts, WithExerciseTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (mg *MusclesGroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*MusclesGroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return mg, nil
	}
	if err := mg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return mg, nil
}

func (mg *MusclesGroupQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(musclesgroup.Columns))
		selectedFields = []string{musclesgroup.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: mg.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					mg.loadTotal = append(mg.loadTotal, func(ctx context.Context, nodes []*MusclesGroup) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"muscles_group_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(musclesgroup.ExercisesTable)
							s.Join(joinT).On(s.C(exercise.FieldID), joinT.C(musclesgroup.ExercisesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(musclesgroup.ExercisesPrimaryKey[0]), ids...))
							s.Select(joinT.C(musclesgroup.ExercisesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(musclesgroup.ExercisesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					mg.loadTotal = append(mg.loadTotal, func(_ context.Context, nodes []*MusclesGroup) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(musclesgroup.ExercisesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			mg.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[musclesgroup.FieldName]; !ok {
				selectedFields = append(selectedFields, musclesgroup.FieldName)
				fieldSeen[musclesgroup.FieldName] = struct{}{}
			}
		case "image":
			if _, ok := fieldSeen[musclesgroup.FieldImage]; !ok {
				selectedFields = append(selectedFields, musclesgroup.FieldImage)
				fieldSeen[musclesgroup.FieldImage] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		mg.Select(selectedFields...)
	}
	return nil
}

type musclesgroupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MusclesGroupPaginateOption
}

func newMusclesGroupPaginateArgs(rv map[string]any) *musclesgroupPaginateArgs {
	args := &musclesgroupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &MusclesGroupOrder{Field: &MusclesGroupOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithMusclesGroupOrder(order))
			}
		case *MusclesGroupOrder:
			if v != nil {
				args.opts = append(args.opts, WithMusclesGroupOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*MusclesGroupWhereInput); ok {
		args.opts = append(args.opts, WithMusclesGroupFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RoutineQuery) CollectFields(ctx context.Context, satisfies ...string) (*RoutineQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return r, nil
	}
	if err := r.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return r, nil
}

func (r *RoutineQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(routine.Columns))
		selectedFields = []string{routine.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: r.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					r.loadTotal = append(r.loadTotal, func(ctx context.Context, nodes []*Routine) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"routine_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(routine.ExercisesTable)
							s.Join(joinT).On(s.C(exercise.FieldID), joinT.C(routine.ExercisesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(routine.ExercisesPrimaryKey[0]), ids...))
							s.Select(joinT.C(routine.ExercisesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(routine.ExercisesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					r.loadTotal = append(r.loadTotal, func(_ context.Context, nodes []*Routine) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(routine.ExercisesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			r.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: r.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			r.withUsers = query
			if _, ok := fieldSeen[routine.FieldUserID]; !ok {
				selectedFields = append(selectedFields, routine.FieldUserID)
				fieldSeen[routine.FieldUserID] = struct{}{}
			}
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineExerciseClient{config: r.config}).Query()
			)
			args := newRoutineExercisePaginateArgs(fieldArgs(ctx, new(RoutineExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newRoutineExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					r.loadTotal = append(r.loadTotal, func(ctx context.Context, nodes []*Routine) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"routine_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(routine.RoutineExercisesColumn), ids...))
						})
						if err := query.GroupBy(routine.RoutineExercisesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					r.loadTotal = append(r.loadTotal, func(_ context.Context, nodes []*Routine) error {
						for i := range nodes {
							n := len(nodes[i].Edges.RoutineExercises)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, routineexerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(routine.RoutineExercisesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			r.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[routine.FieldName]; !ok {
				selectedFields = append(selectedFields, routine.FieldName)
				fieldSeen[routine.FieldName] = struct{}{}
			}
		case "reminderID":
			if _, ok := fieldSeen[routine.FieldReminderID]; !ok {
				selectedFields = append(selectedFields, routine.FieldReminderID)
				fieldSeen[routine.FieldReminderID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[routine.FieldUserID]; !ok {
				selectedFields = append(selectedFields, routine.FieldUserID)
				fieldSeen[routine.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		r.Select(selectedFields...)
	}
	return nil
}

type routinePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RoutinePaginateOption
}

func newRoutinePaginateArgs(rv map[string]any) *routinePaginateArgs {
	args := &routinePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &RoutineOrder{Field: &RoutineOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithRoutineOrder(order))
			}
		case *RoutineOrder:
			if v != nil {
				args.opts = append(args.opts, WithRoutineOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*RoutineWhereInput); ok {
		args.opts = append(args.opts, WithRoutineFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (re *RoutineExerciseQuery) CollectFields(ctx context.Context, satisfies ...string) (*RoutineExerciseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return re, nil
	}
	if err := re.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return re, nil
}

func (re *RoutineExerciseQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(routineexercise.Columns))
		selectedFields = []string{routineexercise.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "routines":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineClient{config: re.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, routineImplementors)...); err != nil {
				return err
			}
			re.withRoutines = query
			if _, ok := fieldSeen[routineexercise.FieldRoutineID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldRoutineID)
				fieldSeen[routineexercise.FieldRoutineID] = struct{}{}
			}
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: re.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
				return err
			}
			re.withExercises = query
			if _, ok := fieldSeen[routineexercise.FieldExerciseID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldExerciseID)
				fieldSeen[routineexercise.FieldExerciseID] = struct{}{}
			}
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: re.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			re.withUsers = query
			if _, ok := fieldSeen[routineexercise.FieldUserID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldUserID)
				fieldSeen[routineexercise.FieldUserID] = struct{}{}
			}
		case "restTime":
			if _, ok := fieldSeen[routineexercise.FieldRestTime]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldRestTime)
				fieldSeen[routineexercise.FieldRestTime] = struct{}{}
			}
		case "sets":
			if _, ok := fieldSeen[routineexercise.FieldSets]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldSets)
				fieldSeen[routineexercise.FieldSets] = struct{}{}
			}
		case "routineID":
			if _, ok := fieldSeen[routineexercise.FieldRoutineID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldRoutineID)
				fieldSeen[routineexercise.FieldRoutineID] = struct{}{}
			}
		case "exerciseID":
			if _, ok := fieldSeen[routineexercise.FieldExerciseID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldExerciseID)
				fieldSeen[routineexercise.FieldExerciseID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[routineexercise.FieldUserID]; !ok {
				selectedFields = append(selectedFields, routineexercise.FieldUserID)
				fieldSeen[routineexercise.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		re.Select(selectedFields...)
	}
	return nil
}

type routineexercisePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []RoutineExercisePaginateOption
}

func newRoutineExercisePaginateArgs(rv map[string]any) *routineexercisePaginateArgs {
	args := &routineexercisePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &RoutineExerciseOrder{Field: &RoutineExerciseOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithRoutineExerciseOrder(order))
			}
		case *RoutineExerciseOrder:
			if v != nil {
				args.opts = append(args.opts, WithRoutineExerciseOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*RoutineExerciseWhereInput); ok {
		args.opts = append(args.opts, WithRoutineExerciseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*TokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TokenQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(token.Columns))
		selectedFields = []string{token.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			t.withUsers = query
			if _, ok := fieldSeen[token.FieldUserID]; !ok {
				selectedFields = append(selectedFields, token.FieldUserID)
				fieldSeen[token.FieldUserID] = struct{}{}
			}
		case "expiry":
			if _, ok := fieldSeen[token.FieldExpiry]; !ok {
				selectedFields = append(selectedFields, token.FieldExpiry)
				fieldSeen[token.FieldExpiry] = struct{}{}
			}
		case "scope":
			if _, ok := fieldSeen[token.FieldScope]; !ok {
				selectedFields = append(selectedFields, token.FieldScope)
				fieldSeen[token.FieldScope] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[token.FieldUserID]; !ok {
				selectedFields = append(selectedFields, token.FieldUserID)
				fieldSeen[token.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type tokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TokenPaginateOption
}

func newTokenPaginateArgs(rv map[string]any) *tokenPaginateArgs {
	args := &tokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &TokenOrder{Field: &TokenOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTokenOrder(order))
			}
		case *TokenOrder:
			if v != nil {
				args.opts = append(args.opts, WithTokenOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*TokenWhereInput); ok {
		args.opts = append(args.opts, WithTokenFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "tokens":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TokenClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, tokenImplementors)...); err != nil {
				return err
			}
			u.WithNamedTokens(alias, func(wq *TokenQuery) {
				*wq = *query
			})
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: u.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"user_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.ExercisesColumn), ids...))
						})
						if err := query.GroupBy(user.ExercisesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.ExercisesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "routines":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineClient{config: u.config}).Query()
			)
			args := newRoutinePaginateArgs(fieldArgs(ctx, new(RoutineWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newRoutinePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"user_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.RoutinesColumn), ids...))
						})
						if err := query.GroupBy(user.RoutinesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Routines)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, routineImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.RoutinesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedRoutines(alias, func(wq *RoutineQuery) {
				*wq = *query
			})
		case "workouts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutClient{config: u.config}).Query()
			)
			args := newWorkoutPaginateArgs(fieldArgs(ctx, new(WorkoutWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newWorkoutPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"user_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.WorkoutsColumn), ids...))
						})
						if err := query.GroupBy(user.WorkoutsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Workouts)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, workoutImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.WorkoutsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedWorkouts(alias, func(wq *WorkoutQuery) {
				*wq = *query
			})
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutLogClient{config: u.config}).Query()
			)
			args := newWorkoutLogPaginateArgs(fieldArgs(ctx, new(WorkoutLogWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newWorkoutLogPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"user_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.WorkoutLogsColumn), ids...))
						})
						if err := query.GroupBy(user.WorkoutLogsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.WorkoutLogs)
							if nodes[i].Edges.totalCount[4] == nil {
								nodes[i].Edges.totalCount[4] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[4][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, workoutlogImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.WorkoutLogsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		case "routineExercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&RoutineExerciseClient{config: u.config}).Query()
			)
			args := newRoutineExercisePaginateArgs(fieldArgs(ctx, new(RoutineExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newRoutineExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"user_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(user.RoutineExercisesColumn), ids...))
						})
						if err := query.GroupBy(user.RoutineExercisesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.RoutineExercises)
							if nodes[i].Edges.totalCount[5] == nil {
								nodes[i].Edges.totalCount[5] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[5][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, routineexerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.RoutineExercisesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedRoutineExercises(alias, func(wq *RoutineExerciseQuery) {
				*wq = *query
			})
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "activated":
			if _, ok := fieldSeen[user.FieldActivated]; !ok {
				selectedFields = append(selectedFields, user.FieldActivated)
				fieldSeen[user.FieldActivated] = struct{}{}
			}
		case "version":
			if _, ok := fieldSeen[user.FieldVersion]; !ok {
				selectedFields = append(selectedFields, user.FieldVersion)
				fieldSeen[user.FieldVersion] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (w *WorkoutQuery) CollectFields(ctx context.Context, satisfies ...string) (*WorkoutQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return w, nil
	}
	if err := w.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return w, nil
}

func (w *WorkoutQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(workout.Columns))
		selectedFields = []string{workout.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: w.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			w.withUsers = query
			if _, ok := fieldSeen[workout.FieldUserID]; !ok {
				selectedFields = append(selectedFields, workout.FieldUserID)
				fieldSeen[workout.FieldUserID] = struct{}{}
			}
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: w.config}).Query()
			)
			args := newExercisePaginateArgs(fieldArgs(ctx, new(ExerciseWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newExercisePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					w.loadTotal = append(w.loadTotal, func(ctx context.Context, nodes []*Workout) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"workout_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(workout.ExercisesTable)
							s.Join(joinT).On(s.C(exercise.FieldID), joinT.C(workout.ExercisesPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(workout.ExercisesPrimaryKey[0]), ids...))
							s.Select(joinT.C(workout.ExercisesPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(workout.ExercisesPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					w.loadTotal = append(w.loadTotal, func(_ context.Context, nodes []*Workout) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Exercises)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(workout.ExercisesPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			w.WithNamedExercises(alias, func(wq *ExerciseQuery) {
				*wq = *query
			})
		case "workoutLogs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutLogClient{config: w.config}).Query()
			)
			args := newWorkoutLogPaginateArgs(fieldArgs(ctx, new(WorkoutLogWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newWorkoutLogPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					w.loadTotal = append(w.loadTotal, func(ctx context.Context, nodes []*Workout) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID pksuid.ID `sql:"workout_id"`
							Count  int       `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(workout.WorkoutLogsColumn), ids...))
						})
						if err := query.GroupBy(workout.WorkoutLogsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[pksuid.ID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					w.loadTotal = append(w.loadTotal, func(_ context.Context, nodes []*Workout) error {
						for i := range nodes {
							n := len(nodes[i].Edges.WorkoutLogs)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, workoutlogImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(workout.WorkoutLogsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			w.WithNamedWorkoutLogs(alias, func(wq *WorkoutLogQuery) {
				*wq = *query
			})
		case "volume":
			if _, ok := fieldSeen[workout.FieldVolume]; !ok {
				selectedFields = append(selectedFields, workout.FieldVolume)
				fieldSeen[workout.FieldVolume] = struct{}{}
			}
		case "duration":
			if _, ok := fieldSeen[workout.FieldDuration]; !ok {
				selectedFields = append(selectedFields, workout.FieldDuration)
				fieldSeen[workout.FieldDuration] = struct{}{}
			}
		case "sets":
			if _, ok := fieldSeen[workout.FieldSets]; !ok {
				selectedFields = append(selectedFields, workout.FieldSets)
				fieldSeen[workout.FieldSets] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[workout.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, workout.FieldCreatedAt)
				fieldSeen[workout.FieldCreatedAt] = struct{}{}
			}
		case "image":
			if _, ok := fieldSeen[workout.FieldImage]; !ok {
				selectedFields = append(selectedFields, workout.FieldImage)
				fieldSeen[workout.FieldImage] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[workout.FieldDescription]; !ok {
				selectedFields = append(selectedFields, workout.FieldDescription)
				fieldSeen[workout.FieldDescription] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[workout.FieldUserID]; !ok {
				selectedFields = append(selectedFields, workout.FieldUserID)
				fieldSeen[workout.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		w.Select(selectedFields...)
	}
	return nil
}

type workoutPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WorkoutPaginateOption
}

func newWorkoutPaginateArgs(rv map[string]any) *workoutPaginateArgs {
	args := &workoutPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &WorkoutOrder{Field: &WorkoutOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithWorkoutOrder(order))
			}
		case *WorkoutOrder:
			if v != nil {
				args.opts = append(args.opts, WithWorkoutOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*WorkoutWhereInput); ok {
		args.opts = append(args.opts, WithWorkoutFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (wl *WorkoutLogQuery) CollectFields(ctx context.Context, satisfies ...string) (*WorkoutLogQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return wl, nil
	}
	if err := wl.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return wl, nil
}

func (wl *WorkoutLogQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(workoutlog.Columns))
		selectedFields = []string{workoutlog.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: wl.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, userImplementors)...); err != nil {
				return err
			}
			wl.withUsers = query
			if _, ok := fieldSeen[workoutlog.FieldUserID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldUserID)
				fieldSeen[workoutlog.FieldUserID] = struct{}{}
			}
		case "workouts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&WorkoutClient{config: wl.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, workoutImplementors)...); err != nil {
				return err
			}
			wl.withWorkouts = query
			if _, ok := fieldSeen[workoutlog.FieldWorkoutID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldWorkoutID)
				fieldSeen[workoutlog.FieldWorkoutID] = struct{}{}
			}
		case "exercises":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ExerciseClient{config: wl.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, mayAddCondition(satisfies, exerciseImplementors)...); err != nil {
				return err
			}
			wl.withExercises = query
			if _, ok := fieldSeen[workoutlog.FieldExerciseID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldExerciseID)
				fieldSeen[workoutlog.FieldExerciseID] = struct{}{}
			}
		case "sets":
			if _, ok := fieldSeen[workoutlog.FieldSets]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldSets)
				fieldSeen[workoutlog.FieldSets] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[workoutlog.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldCreatedAt)
				fieldSeen[workoutlog.FieldCreatedAt] = struct{}{}
			}
		case "workoutID":
			if _, ok := fieldSeen[workoutlog.FieldWorkoutID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldWorkoutID)
				fieldSeen[workoutlog.FieldWorkoutID] = struct{}{}
			}
		case "exerciseID":
			if _, ok := fieldSeen[workoutlog.FieldExerciseID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldExerciseID)
				fieldSeen[workoutlog.FieldExerciseID] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[workoutlog.FieldUserID]; !ok {
				selectedFields = append(selectedFields, workoutlog.FieldUserID)
				fieldSeen[workoutlog.FieldUserID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		wl.Select(selectedFields...)
	}
	return nil
}

type workoutlogPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []WorkoutLogPaginateOption
}

func newWorkoutLogPaginateArgs(rv map[string]any) *workoutlogPaginateArgs {
	args := &workoutlogPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &WorkoutLogOrder{Field: &WorkoutLogOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithWorkoutLogOrder(order))
			}
		case *WorkoutLogOrder:
			if v != nil {
				args.opts = append(args.opts, WithWorkoutLogOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*WorkoutLogWhereInput); ok {
		args.opts = append(args.opts, WithWorkoutLogFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
