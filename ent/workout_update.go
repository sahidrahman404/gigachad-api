// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/predicate"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workout"
	"github.com/sahidrahman404/gigachad-api/ent/workoutlog"
)

// WorkoutUpdate is the builder for updating Workout entities.
type WorkoutUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutMutation
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wu *WorkoutUpdate) Where(ps ...predicate.Workout) *WorkoutUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WorkoutUpdate) SetName(s string) *WorkoutUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetVolume sets the "volume" field.
func (wu *WorkoutUpdate) SetVolume(i int) *WorkoutUpdate {
	wu.mutation.ResetVolume()
	wu.mutation.SetVolume(i)
	return wu
}

// AddVolume adds i to the "volume" field.
func (wu *WorkoutUpdate) AddVolume(i int) *WorkoutUpdate {
	wu.mutation.AddVolume(i)
	return wu
}

// SetReps sets the "reps" field.
func (wu *WorkoutUpdate) SetReps(i int) *WorkoutUpdate {
	wu.mutation.ResetReps()
	wu.mutation.SetReps(i)
	return wu
}

// AddReps adds i to the "reps" field.
func (wu *WorkoutUpdate) AddReps(i int) *WorkoutUpdate {
	wu.mutation.AddReps(i)
	return wu
}

// SetTime sets the "time" field.
func (wu *WorkoutUpdate) SetTime(s string) *WorkoutUpdate {
	wu.mutation.SetTime(s)
	return wu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableTime(s *string) *WorkoutUpdate {
	if s != nil {
		wu.SetTime(*s)
	}
	return wu
}

// ClearTime clears the value of the "time" field.
func (wu *WorkoutUpdate) ClearTime() *WorkoutUpdate {
	wu.mutation.ClearTime()
	return wu
}

// SetSets sets the "sets" field.
func (wu *WorkoutUpdate) SetSets(i int) *WorkoutUpdate {
	wu.mutation.ResetSets()
	wu.mutation.SetSets(i)
	return wu
}

// AddSets adds i to the "sets" field.
func (wu *WorkoutUpdate) AddSets(i int) *WorkoutUpdate {
	wu.mutation.AddSets(i)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WorkoutUpdate) SetCreatedAt(s string) *WorkoutUpdate {
	wu.mutation.SetCreatedAt(s)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableCreatedAt(s *string) *WorkoutUpdate {
	if s != nil {
		wu.SetCreatedAt(*s)
	}
	return wu
}

// SetImage sets the "image" field.
func (wu *WorkoutUpdate) SetImage(s string) *WorkoutUpdate {
	wu.mutation.SetImage(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WorkoutUpdate) SetDescription(s string) *WorkoutUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WorkoutUpdate) SetUserID(s string) *WorkoutUpdate {
	wu.mutation.SetUserID(s)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableUserID(s *string) *WorkoutUpdate {
	if s != nil {
		wu.SetUserID(*s)
	}
	return wu
}

// ClearUserID clears the value of the "user_id" field.
func (wu *WorkoutUpdate) ClearUserID() *WorkoutUpdate {
	wu.mutation.ClearUserID()
	return wu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (wu *WorkoutUpdate) SetUsersID(id string) *WorkoutUpdate {
	wu.mutation.SetUsersID(id)
	return wu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableUsersID(id *string) *WorkoutUpdate {
	if id != nil {
		wu = wu.SetUsersID(*id)
	}
	return wu
}

// SetUsers sets the "users" edge to the User entity.
func (wu *WorkoutUpdate) SetUsers(u *User) *WorkoutUpdate {
	return wu.SetUsersID(u.ID)
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by IDs.
func (wu *WorkoutUpdate) AddWorkoutLogIDs(ids ...string) *WorkoutUpdate {
	wu.mutation.AddWorkoutLogIDs(ids...)
	return wu
}

// AddWorkoutLogs adds the "workout_logs" edges to the WorkoutLog entity.
func (wu *WorkoutUpdate) AddWorkoutLogs(w ...*WorkoutLog) *WorkoutUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkoutLogIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wu *WorkoutUpdate) Mutation() *WorkoutMutation {
	return wu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (wu *WorkoutUpdate) ClearUsers() *WorkoutUpdate {
	wu.mutation.ClearUsers()
	return wu
}

// ClearWorkoutLogs clears all "workout_logs" edges to the WorkoutLog entity.
func (wu *WorkoutUpdate) ClearWorkoutLogs() *WorkoutUpdate {
	wu.mutation.ClearWorkoutLogs()
	return wu
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to WorkoutLog entities by IDs.
func (wu *WorkoutUpdate) RemoveWorkoutLogIDs(ids ...string) *WorkoutUpdate {
	wu.mutation.RemoveWorkoutLogIDs(ids...)
	return wu
}

// RemoveWorkoutLogs removes "workout_logs" edges to WorkoutLog entities.
func (wu *WorkoutUpdate) RemoveWorkoutLogs(w ...*WorkoutLog) *WorkoutUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkoutLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkoutUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkoutUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkoutUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkoutUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WorkoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Volume(); ok {
		_spec.SetField(workout.FieldVolume, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedVolume(); ok {
		_spec.AddField(workout.FieldVolume, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Reps(); ok {
		_spec.SetField(workout.FieldReps, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedReps(); ok {
		_spec.AddField(workout.FieldReps, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Time(); ok {
		_spec.SetField(workout.FieldTime, field.TypeString, value)
	}
	if wu.mutation.TimeCleared() {
		_spec.ClearField(workout.FieldTime, field.TypeString)
	}
	if value, ok := wu.mutation.Sets(); ok {
		_spec.SetField(workout.FieldSets, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedSets(); ok {
		_spec.AddField(workout.FieldSets, field.TypeInt, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(workout.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := wu.mutation.Image(); ok {
		_spec.SetField(workout.FieldImage, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(workout.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.UsersTable,
			Columns: []string{workout.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.UsersTable,
			Columns: []string{workout.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkoutLogsIDs(); len(nodes) > 0 && !wu.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkoutLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkoutUpdateOne is the builder for updating a single Workout entity.
type WorkoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutMutation
}

// SetName sets the "name" field.
func (wuo *WorkoutUpdateOne) SetName(s string) *WorkoutUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetVolume sets the "volume" field.
func (wuo *WorkoutUpdateOne) SetVolume(i int) *WorkoutUpdateOne {
	wuo.mutation.ResetVolume()
	wuo.mutation.SetVolume(i)
	return wuo
}

// AddVolume adds i to the "volume" field.
func (wuo *WorkoutUpdateOne) AddVolume(i int) *WorkoutUpdateOne {
	wuo.mutation.AddVolume(i)
	return wuo
}

// SetReps sets the "reps" field.
func (wuo *WorkoutUpdateOne) SetReps(i int) *WorkoutUpdateOne {
	wuo.mutation.ResetReps()
	wuo.mutation.SetReps(i)
	return wuo
}

// AddReps adds i to the "reps" field.
func (wuo *WorkoutUpdateOne) AddReps(i int) *WorkoutUpdateOne {
	wuo.mutation.AddReps(i)
	return wuo
}

// SetTime sets the "time" field.
func (wuo *WorkoutUpdateOne) SetTime(s string) *WorkoutUpdateOne {
	wuo.mutation.SetTime(s)
	return wuo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableTime(s *string) *WorkoutUpdateOne {
	if s != nil {
		wuo.SetTime(*s)
	}
	return wuo
}

// ClearTime clears the value of the "time" field.
func (wuo *WorkoutUpdateOne) ClearTime() *WorkoutUpdateOne {
	wuo.mutation.ClearTime()
	return wuo
}

// SetSets sets the "sets" field.
func (wuo *WorkoutUpdateOne) SetSets(i int) *WorkoutUpdateOne {
	wuo.mutation.ResetSets()
	wuo.mutation.SetSets(i)
	return wuo
}

// AddSets adds i to the "sets" field.
func (wuo *WorkoutUpdateOne) AddSets(i int) *WorkoutUpdateOne {
	wuo.mutation.AddSets(i)
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WorkoutUpdateOne) SetCreatedAt(s string) *WorkoutUpdateOne {
	wuo.mutation.SetCreatedAt(s)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableCreatedAt(s *string) *WorkoutUpdateOne {
	if s != nil {
		wuo.SetCreatedAt(*s)
	}
	return wuo
}

// SetImage sets the "image" field.
func (wuo *WorkoutUpdateOne) SetImage(s string) *WorkoutUpdateOne {
	wuo.mutation.SetImage(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WorkoutUpdateOne) SetDescription(s string) *WorkoutUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WorkoutUpdateOne) SetUserID(s string) *WorkoutUpdateOne {
	wuo.mutation.SetUserID(s)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableUserID(s *string) *WorkoutUpdateOne {
	if s != nil {
		wuo.SetUserID(*s)
	}
	return wuo
}

// ClearUserID clears the value of the "user_id" field.
func (wuo *WorkoutUpdateOne) ClearUserID() *WorkoutUpdateOne {
	wuo.mutation.ClearUserID()
	return wuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (wuo *WorkoutUpdateOne) SetUsersID(id string) *WorkoutUpdateOne {
	wuo.mutation.SetUsersID(id)
	return wuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableUsersID(id *string) *WorkoutUpdateOne {
	if id != nil {
		wuo = wuo.SetUsersID(*id)
	}
	return wuo
}

// SetUsers sets the "users" edge to the User entity.
func (wuo *WorkoutUpdateOne) SetUsers(u *User) *WorkoutUpdateOne {
	return wuo.SetUsersID(u.ID)
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by IDs.
func (wuo *WorkoutUpdateOne) AddWorkoutLogIDs(ids ...string) *WorkoutUpdateOne {
	wuo.mutation.AddWorkoutLogIDs(ids...)
	return wuo
}

// AddWorkoutLogs adds the "workout_logs" edges to the WorkoutLog entity.
func (wuo *WorkoutUpdateOne) AddWorkoutLogs(w ...*WorkoutLog) *WorkoutUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkoutLogIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wuo *WorkoutUpdateOne) Mutation() *WorkoutMutation {
	return wuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (wuo *WorkoutUpdateOne) ClearUsers() *WorkoutUpdateOne {
	wuo.mutation.ClearUsers()
	return wuo
}

// ClearWorkoutLogs clears all "workout_logs" edges to the WorkoutLog entity.
func (wuo *WorkoutUpdateOne) ClearWorkoutLogs() *WorkoutUpdateOne {
	wuo.mutation.ClearWorkoutLogs()
	return wuo
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to WorkoutLog entities by IDs.
func (wuo *WorkoutUpdateOne) RemoveWorkoutLogIDs(ids ...string) *WorkoutUpdateOne {
	wuo.mutation.RemoveWorkoutLogIDs(ids...)
	return wuo
}

// RemoveWorkoutLogs removes "workout_logs" edges to WorkoutLog entities.
func (wuo *WorkoutUpdateOne) RemoveWorkoutLogs(w ...*WorkoutLog) *WorkoutUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkoutLogIDs(ids...)
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wuo *WorkoutUpdateOne) Where(ps ...predicate.Workout) *WorkoutUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkoutUpdateOne) Select(field string, fields ...string) *WorkoutUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workout entity.
func (wuo *WorkoutUpdateOne) Save(ctx context.Context) (*Workout, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) SaveX(ctx context.Context) *Workout {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkoutUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WorkoutUpdateOne) sqlSave(ctx context.Context) (_node *Workout, err error) {
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workout.FieldID)
		for _, f := range fields {
			if !workout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Volume(); ok {
		_spec.SetField(workout.FieldVolume, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedVolume(); ok {
		_spec.AddField(workout.FieldVolume, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Reps(); ok {
		_spec.SetField(workout.FieldReps, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedReps(); ok {
		_spec.AddField(workout.FieldReps, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Time(); ok {
		_spec.SetField(workout.FieldTime, field.TypeString, value)
	}
	if wuo.mutation.TimeCleared() {
		_spec.ClearField(workout.FieldTime, field.TypeString)
	}
	if value, ok := wuo.mutation.Sets(); ok {
		_spec.SetField(workout.FieldSets, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedSets(); ok {
		_spec.AddField(workout.FieldSets, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(workout.FieldCreatedAt, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Image(); ok {
		_spec.SetField(workout.FieldImage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(workout.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.UsersTable,
			Columns: []string{workout.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workout.UsersTable,
			Columns: []string{workout.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkoutLogsIDs(); len(nodes) > 0 && !wuo.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkoutLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutLogsTable,
			Columns: []string{workout.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workout{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
