// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/equipment"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/exercisetype"
	"github.com/sahidrahman404/gigachad-api/ent/musclesgroup"
	"github.com/sahidrahman404/gigachad-api/ent/predicate"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/routineexercise"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workoutlog"
)

// ExerciseUpdate is the builder for updating Exercise entities.
type ExerciseUpdate struct {
	config
	hooks    []Hook
	mutation *ExerciseMutation
}

// Where appends a list predicates to the ExerciseUpdate builder.
func (eu *ExerciseUpdate) Where(ps ...predicate.Exercise) *ExerciseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *ExerciseUpdate) SetName(s string) *ExerciseUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetImage sets the "image" field.
func (eu *ExerciseUpdate) SetImage(s schematype.Image) *ExerciseUpdate {
	eu.mutation.SetImage(s)
	return eu
}

// SetHowTo sets the "how_to" field.
func (eu *ExerciseUpdate) SetHowTo(s string) *ExerciseUpdate {
	eu.mutation.SetHowTo(s)
	return eu
}

// SetNillableHowTo sets the "how_to" field if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableHowTo(s *string) *ExerciseUpdate {
	if s != nil {
		eu.SetHowTo(*s)
	}
	return eu
}

// ClearHowTo clears the value of the "how_to" field.
func (eu *ExerciseUpdate) ClearHowTo() *ExerciseUpdate {
	eu.mutation.ClearHowTo()
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *ExerciseUpdate) SetUserID(pk pksuid.ID) *ExerciseUpdate {
	eu.mutation.SetUserID(pk)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableUserID(pk *pksuid.ID) *ExerciseUpdate {
	if pk != nil {
		eu.SetUserID(*pk)
	}
	return eu
}

// ClearUserID clears the value of the "user_id" field.
func (eu *ExerciseUpdate) ClearUserID() *ExerciseUpdate {
	eu.mutation.ClearUserID()
	return eu
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by IDs.
func (eu *ExerciseUpdate) AddWorkoutLogIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddWorkoutLogIDs(ids...)
	return eu
}

// AddWorkoutLogs adds the "workout_logs" edges to the WorkoutLog entity.
func (eu *ExerciseUpdate) AddWorkoutLogs(w ...*WorkoutLog) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddWorkoutLogIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (eu *ExerciseUpdate) SetUsersID(id pksuid.ID) *ExerciseUpdate {
	eu.mutation.SetUsersID(id)
	return eu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableUsersID(id *pksuid.ID) *ExerciseUpdate {
	if id != nil {
		eu = eu.SetUsersID(*id)
	}
	return eu
}

// SetUsers sets the "users" edge to the User entity.
func (eu *ExerciseUpdate) SetUsers(u *User) *ExerciseUpdate {
	return eu.SetUsersID(u.ID)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (eu *ExerciseUpdate) AddEquipmentIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddEquipmentIDs(ids...)
	return eu
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (eu *ExerciseUpdate) AddEquipment(e ...*Equipment) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEquipmentIDs(ids...)
}

// AddMusclesGroupIDs adds the "muscles_groups" edge to the MusclesGroup entity by IDs.
func (eu *ExerciseUpdate) AddMusclesGroupIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddMusclesGroupIDs(ids...)
	return eu
}

// AddMusclesGroups adds the "muscles_groups" edges to the MusclesGroup entity.
func (eu *ExerciseUpdate) AddMusclesGroups(m ...*MusclesGroup) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.AddMusclesGroupIDs(ids...)
}

// AddExerciseTypeIDs adds the "exercise_types" edge to the ExerciseType entity by IDs.
func (eu *ExerciseUpdate) AddExerciseTypeIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddExerciseTypeIDs(ids...)
	return eu
}

// AddExerciseTypes adds the "exercise_types" edges to the ExerciseType entity.
func (eu *ExerciseUpdate) AddExerciseTypes(e ...*ExerciseType) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExerciseTypeIDs(ids...)
}

// AddRoutineIDs adds the "routines" edge to the Routine entity by IDs.
func (eu *ExerciseUpdate) AddRoutineIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddRoutineIDs(ids...)
	return eu
}

// AddRoutines adds the "routines" edges to the Routine entity.
func (eu *ExerciseUpdate) AddRoutines(r ...*Routine) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRoutineIDs(ids...)
}

// AddRoutineExerciseIDs adds the "routine_exercises" edge to the RoutineExercise entity by IDs.
func (eu *ExerciseUpdate) AddRoutineExerciseIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.AddRoutineExerciseIDs(ids...)
	return eu
}

// AddRoutineExercises adds the "routine_exercises" edges to the RoutineExercise entity.
func (eu *ExerciseUpdate) AddRoutineExercises(r ...*RoutineExercise) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRoutineExerciseIDs(ids...)
}

// Mutation returns the ExerciseMutation object of the builder.
func (eu *ExerciseUpdate) Mutation() *ExerciseMutation {
	return eu.mutation
}

// ClearWorkoutLogs clears all "workout_logs" edges to the WorkoutLog entity.
func (eu *ExerciseUpdate) ClearWorkoutLogs() *ExerciseUpdate {
	eu.mutation.ClearWorkoutLogs()
	return eu
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to WorkoutLog entities by IDs.
func (eu *ExerciseUpdate) RemoveWorkoutLogIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveWorkoutLogIDs(ids...)
	return eu
}

// RemoveWorkoutLogs removes "workout_logs" edges to WorkoutLog entities.
func (eu *ExerciseUpdate) RemoveWorkoutLogs(w ...*WorkoutLog) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveWorkoutLogIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (eu *ExerciseUpdate) ClearUsers() *ExerciseUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (eu *ExerciseUpdate) ClearEquipment() *ExerciseUpdate {
	eu.mutation.ClearEquipment()
	return eu
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (eu *ExerciseUpdate) RemoveEquipmentIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveEquipmentIDs(ids...)
	return eu
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (eu *ExerciseUpdate) RemoveEquipment(e ...*Equipment) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEquipmentIDs(ids...)
}

// ClearMusclesGroups clears all "muscles_groups" edges to the MusclesGroup entity.
func (eu *ExerciseUpdate) ClearMusclesGroups() *ExerciseUpdate {
	eu.mutation.ClearMusclesGroups()
	return eu
}

// RemoveMusclesGroupIDs removes the "muscles_groups" edge to MusclesGroup entities by IDs.
func (eu *ExerciseUpdate) RemoveMusclesGroupIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveMusclesGroupIDs(ids...)
	return eu
}

// RemoveMusclesGroups removes "muscles_groups" edges to MusclesGroup entities.
func (eu *ExerciseUpdate) RemoveMusclesGroups(m ...*MusclesGroup) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.RemoveMusclesGroupIDs(ids...)
}

// ClearExerciseTypes clears all "exercise_types" edges to the ExerciseType entity.
func (eu *ExerciseUpdate) ClearExerciseTypes() *ExerciseUpdate {
	eu.mutation.ClearExerciseTypes()
	return eu
}

// RemoveExerciseTypeIDs removes the "exercise_types" edge to ExerciseType entities by IDs.
func (eu *ExerciseUpdate) RemoveExerciseTypeIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveExerciseTypeIDs(ids...)
	return eu
}

// RemoveExerciseTypes removes "exercise_types" edges to ExerciseType entities.
func (eu *ExerciseUpdate) RemoveExerciseTypes(e ...*ExerciseType) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExerciseTypeIDs(ids...)
}

// ClearRoutines clears all "routines" edges to the Routine entity.
func (eu *ExerciseUpdate) ClearRoutines() *ExerciseUpdate {
	eu.mutation.ClearRoutines()
	return eu
}

// RemoveRoutineIDs removes the "routines" edge to Routine entities by IDs.
func (eu *ExerciseUpdate) RemoveRoutineIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveRoutineIDs(ids...)
	return eu
}

// RemoveRoutines removes "routines" edges to Routine entities.
func (eu *ExerciseUpdate) RemoveRoutines(r ...*Routine) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRoutineIDs(ids...)
}

// ClearRoutineExercises clears all "routine_exercises" edges to the RoutineExercise entity.
func (eu *ExerciseUpdate) ClearRoutineExercises() *ExerciseUpdate {
	eu.mutation.ClearRoutineExercises()
	return eu
}

// RemoveRoutineExerciseIDs removes the "routine_exercises" edge to RoutineExercise entities by IDs.
func (eu *ExerciseUpdate) RemoveRoutineExerciseIDs(ids ...pksuid.ID) *ExerciseUpdate {
	eu.mutation.RemoveRoutineExerciseIDs(ids...)
	return eu
}

// RemoveRoutineExercises removes "routine_exercises" edges to RoutineExercise entities.
func (eu *ExerciseUpdate) RemoveRoutineExercises(r ...*RoutineExercise) *ExerciseUpdate {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRoutineExerciseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExerciseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExerciseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExerciseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExerciseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExerciseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exercise.Table, exercise.Columns, sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(exercise.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Image(); ok {
		_spec.SetField(exercise.FieldImage, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.HowTo(); ok {
		_spec.SetField(exercise.FieldHowTo, field.TypeString, value)
	}
	if eu.mutation.HowToCleared() {
		_spec.ClearField(exercise.FieldHowTo, field.TypeString)
	}
	if eu.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedWorkoutLogsIDs(); len(nodes) > 0 && !eu.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WorkoutLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exercise.UsersTable,
			Columns: []string{exercise.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exercise.UsersTable,
			Columns: []string{exercise.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !eu.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MusclesGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedMusclesGroupsIDs(); len(nodes) > 0 && !eu.mutation.MusclesGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MusclesGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExerciseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExerciseTypesIDs(); len(nodes) > 0 && !eu.mutation.ExerciseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExerciseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		createE := &RoutineExerciseCreate{config: eu.config, mutation: newRoutineExerciseMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRoutinesIDs(); len(nodes) > 0 && !eu.mutation.RoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoutineExerciseCreate{config: eu.config, mutation: newRoutineExerciseMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoutineExerciseCreate{config: eu.config, mutation: newRoutineExerciseMutation(eu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RoutineExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRoutineExercisesIDs(); len(nodes) > 0 && !eu.mutation.RoutineExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RoutineExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExerciseUpdateOne is the builder for updating a single Exercise entity.
type ExerciseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExerciseMutation
}

// SetName sets the "name" field.
func (euo *ExerciseUpdateOne) SetName(s string) *ExerciseUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetImage sets the "image" field.
func (euo *ExerciseUpdateOne) SetImage(s schematype.Image) *ExerciseUpdateOne {
	euo.mutation.SetImage(s)
	return euo
}

// SetHowTo sets the "how_to" field.
func (euo *ExerciseUpdateOne) SetHowTo(s string) *ExerciseUpdateOne {
	euo.mutation.SetHowTo(s)
	return euo
}

// SetNillableHowTo sets the "how_to" field if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableHowTo(s *string) *ExerciseUpdateOne {
	if s != nil {
		euo.SetHowTo(*s)
	}
	return euo
}

// ClearHowTo clears the value of the "how_to" field.
func (euo *ExerciseUpdateOne) ClearHowTo() *ExerciseUpdateOne {
	euo.mutation.ClearHowTo()
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *ExerciseUpdateOne) SetUserID(pk pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.SetUserID(pk)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableUserID(pk *pksuid.ID) *ExerciseUpdateOne {
	if pk != nil {
		euo.SetUserID(*pk)
	}
	return euo
}

// ClearUserID clears the value of the "user_id" field.
func (euo *ExerciseUpdateOne) ClearUserID() *ExerciseUpdateOne {
	euo.mutation.ClearUserID()
	return euo
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by IDs.
func (euo *ExerciseUpdateOne) AddWorkoutLogIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddWorkoutLogIDs(ids...)
	return euo
}

// AddWorkoutLogs adds the "workout_logs" edges to the WorkoutLog entity.
func (euo *ExerciseUpdateOne) AddWorkoutLogs(w ...*WorkoutLog) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddWorkoutLogIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (euo *ExerciseUpdateOne) SetUsersID(id pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.SetUsersID(id)
	return euo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableUsersID(id *pksuid.ID) *ExerciseUpdateOne {
	if id != nil {
		euo = euo.SetUsersID(*id)
	}
	return euo
}

// SetUsers sets the "users" edge to the User entity.
func (euo *ExerciseUpdateOne) SetUsers(u *User) *ExerciseUpdateOne {
	return euo.SetUsersID(u.ID)
}

// AddEquipmentIDs adds the "equipment" edge to the Equipment entity by IDs.
func (euo *ExerciseUpdateOne) AddEquipmentIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddEquipmentIDs(ids...)
	return euo
}

// AddEquipment adds the "equipment" edges to the Equipment entity.
func (euo *ExerciseUpdateOne) AddEquipment(e ...*Equipment) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEquipmentIDs(ids...)
}

// AddMusclesGroupIDs adds the "muscles_groups" edge to the MusclesGroup entity by IDs.
func (euo *ExerciseUpdateOne) AddMusclesGroupIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddMusclesGroupIDs(ids...)
	return euo
}

// AddMusclesGroups adds the "muscles_groups" edges to the MusclesGroup entity.
func (euo *ExerciseUpdateOne) AddMusclesGroups(m ...*MusclesGroup) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.AddMusclesGroupIDs(ids...)
}

// AddExerciseTypeIDs adds the "exercise_types" edge to the ExerciseType entity by IDs.
func (euo *ExerciseUpdateOne) AddExerciseTypeIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddExerciseTypeIDs(ids...)
	return euo
}

// AddExerciseTypes adds the "exercise_types" edges to the ExerciseType entity.
func (euo *ExerciseUpdateOne) AddExerciseTypes(e ...*ExerciseType) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExerciseTypeIDs(ids...)
}

// AddRoutineIDs adds the "routines" edge to the Routine entity by IDs.
func (euo *ExerciseUpdateOne) AddRoutineIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddRoutineIDs(ids...)
	return euo
}

// AddRoutines adds the "routines" edges to the Routine entity.
func (euo *ExerciseUpdateOne) AddRoutines(r ...*Routine) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRoutineIDs(ids...)
}

// AddRoutineExerciseIDs adds the "routine_exercises" edge to the RoutineExercise entity by IDs.
func (euo *ExerciseUpdateOne) AddRoutineExerciseIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.AddRoutineExerciseIDs(ids...)
	return euo
}

// AddRoutineExercises adds the "routine_exercises" edges to the RoutineExercise entity.
func (euo *ExerciseUpdateOne) AddRoutineExercises(r ...*RoutineExercise) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRoutineExerciseIDs(ids...)
}

// Mutation returns the ExerciseMutation object of the builder.
func (euo *ExerciseUpdateOne) Mutation() *ExerciseMutation {
	return euo.mutation
}

// ClearWorkoutLogs clears all "workout_logs" edges to the WorkoutLog entity.
func (euo *ExerciseUpdateOne) ClearWorkoutLogs() *ExerciseUpdateOne {
	euo.mutation.ClearWorkoutLogs()
	return euo
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to WorkoutLog entities by IDs.
func (euo *ExerciseUpdateOne) RemoveWorkoutLogIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveWorkoutLogIDs(ids...)
	return euo
}

// RemoveWorkoutLogs removes "workout_logs" edges to WorkoutLog entities.
func (euo *ExerciseUpdateOne) RemoveWorkoutLogs(w ...*WorkoutLog) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveWorkoutLogIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (euo *ExerciseUpdateOne) ClearUsers() *ExerciseUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// ClearEquipment clears all "equipment" edges to the Equipment entity.
func (euo *ExerciseUpdateOne) ClearEquipment() *ExerciseUpdateOne {
	euo.mutation.ClearEquipment()
	return euo
}

// RemoveEquipmentIDs removes the "equipment" edge to Equipment entities by IDs.
func (euo *ExerciseUpdateOne) RemoveEquipmentIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveEquipmentIDs(ids...)
	return euo
}

// RemoveEquipment removes "equipment" edges to Equipment entities.
func (euo *ExerciseUpdateOne) RemoveEquipment(e ...*Equipment) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEquipmentIDs(ids...)
}

// ClearMusclesGroups clears all "muscles_groups" edges to the MusclesGroup entity.
func (euo *ExerciseUpdateOne) ClearMusclesGroups() *ExerciseUpdateOne {
	euo.mutation.ClearMusclesGroups()
	return euo
}

// RemoveMusclesGroupIDs removes the "muscles_groups" edge to MusclesGroup entities by IDs.
func (euo *ExerciseUpdateOne) RemoveMusclesGroupIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveMusclesGroupIDs(ids...)
	return euo
}

// RemoveMusclesGroups removes "muscles_groups" edges to MusclesGroup entities.
func (euo *ExerciseUpdateOne) RemoveMusclesGroups(m ...*MusclesGroup) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.RemoveMusclesGroupIDs(ids...)
}

// ClearExerciseTypes clears all "exercise_types" edges to the ExerciseType entity.
func (euo *ExerciseUpdateOne) ClearExerciseTypes() *ExerciseUpdateOne {
	euo.mutation.ClearExerciseTypes()
	return euo
}

// RemoveExerciseTypeIDs removes the "exercise_types" edge to ExerciseType entities by IDs.
func (euo *ExerciseUpdateOne) RemoveExerciseTypeIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveExerciseTypeIDs(ids...)
	return euo
}

// RemoveExerciseTypes removes "exercise_types" edges to ExerciseType entities.
func (euo *ExerciseUpdateOne) RemoveExerciseTypes(e ...*ExerciseType) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExerciseTypeIDs(ids...)
}

// ClearRoutines clears all "routines" edges to the Routine entity.
func (euo *ExerciseUpdateOne) ClearRoutines() *ExerciseUpdateOne {
	euo.mutation.ClearRoutines()
	return euo
}

// RemoveRoutineIDs removes the "routines" edge to Routine entities by IDs.
func (euo *ExerciseUpdateOne) RemoveRoutineIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveRoutineIDs(ids...)
	return euo
}

// RemoveRoutines removes "routines" edges to Routine entities.
func (euo *ExerciseUpdateOne) RemoveRoutines(r ...*Routine) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRoutineIDs(ids...)
}

// ClearRoutineExercises clears all "routine_exercises" edges to the RoutineExercise entity.
func (euo *ExerciseUpdateOne) ClearRoutineExercises() *ExerciseUpdateOne {
	euo.mutation.ClearRoutineExercises()
	return euo
}

// RemoveRoutineExerciseIDs removes the "routine_exercises" edge to RoutineExercise entities by IDs.
func (euo *ExerciseUpdateOne) RemoveRoutineExerciseIDs(ids ...pksuid.ID) *ExerciseUpdateOne {
	euo.mutation.RemoveRoutineExerciseIDs(ids...)
	return euo
}

// RemoveRoutineExercises removes "routine_exercises" edges to RoutineExercise entities.
func (euo *ExerciseUpdateOne) RemoveRoutineExercises(r ...*RoutineExercise) *ExerciseUpdateOne {
	ids := make([]pksuid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRoutineExerciseIDs(ids...)
}

// Where appends a list predicates to the ExerciseUpdate builder.
func (euo *ExerciseUpdateOne) Where(ps ...predicate.Exercise) *ExerciseUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExerciseUpdateOne) Select(field string, fields ...string) *ExerciseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exercise entity.
func (euo *ExerciseUpdateOne) Save(ctx context.Context) (*Exercise, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExerciseUpdateOne) SaveX(ctx context.Context) *Exercise {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExerciseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExerciseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExerciseUpdateOne) sqlSave(ctx context.Context) (_node *Exercise, err error) {
	_spec := sqlgraph.NewUpdateSpec(exercise.Table, exercise.Columns, sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exercise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exercise.FieldID)
		for _, f := range fields {
			if !exercise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exercise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(exercise.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Image(); ok {
		_spec.SetField(exercise.FieldImage, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.HowTo(); ok {
		_spec.SetField(exercise.FieldHowTo, field.TypeString, value)
	}
	if euo.mutation.HowToCleared() {
		_spec.ClearField(exercise.FieldHowTo, field.TypeString)
	}
	if euo.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedWorkoutLogsIDs(); len(nodes) > 0 && !euo.mutation.WorkoutLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WorkoutLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutLogsTable,
			Columns: []string{exercise.WorkoutLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exercise.UsersTable,
			Columns: []string{exercise.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exercise.UsersTable,
			Columns: []string{exercise.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEquipmentIDs(); len(nodes) > 0 && !euo.mutation.EquipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EquipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.EquipmentTable,
			Columns: exercise.EquipmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MusclesGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedMusclesGroupsIDs(); len(nodes) > 0 && !euo.mutation.MusclesGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MusclesGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.MusclesGroupsTable,
			Columns: exercise.MusclesGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(musclesgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExerciseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExerciseTypesIDs(); len(nodes) > 0 && !euo.mutation.ExerciseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExerciseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.ExerciseTypesTable,
			Columns: exercise.ExerciseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercisetype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		createE := &RoutineExerciseCreate{config: euo.config, mutation: newRoutineExerciseMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRoutinesIDs(); len(nodes) > 0 && !euo.mutation.RoutinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoutineExerciseCreate{config: euo.config, mutation: newRoutineExerciseMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   exercise.RoutinesTable,
			Columns: exercise.RoutinesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoutineExerciseCreate{config: euo.config, mutation: newRoutineExerciseMutation(euo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RoutineExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRoutineExercisesIDs(); len(nodes) > 0 && !euo.mutation.RoutineExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RoutineExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   exercise.RoutineExercisesTable,
			Columns: []string{exercise.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exercise{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
