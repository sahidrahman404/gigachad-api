// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (e *Equipment) Exercises(ctx context.Context) (result []*Exercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.ExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryExercises().All(ctx)
	}
	return result, err
}

func (e *Exercise) RoutineExercises(ctx context.Context) (result []*RoutineExercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedRoutineExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.RoutineExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryRoutineExercises().All(ctx)
	}
	return result, err
}

func (e *Exercise) WorkoutLogs(ctx context.Context) (result []*WorkoutLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedWorkoutLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.WorkoutLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryWorkoutLogs().All(ctx)
	}
	return result, err
}

func (e *Exercise) Users(ctx context.Context) (*User, error) {
	result, err := e.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Exercise) Equipments(ctx context.Context) (*Equipment, error) {
	result, err := e.Edges.EquipmentsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryEquipments().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Exercise) MusclesGroups(ctx context.Context) (*MusclesGroup, error) {
	result, err := e.Edges.MusclesGroupsOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryMusclesGroups().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Exercise) ExerciseTypes(ctx context.Context) (*ExerciseType, error) {
	result, err := e.Edges.ExerciseTypesOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryExerciseTypes().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (et *ExerciseType) Exercises(ctx context.Context) (result []*Exercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = et.NamedExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = et.Edges.ExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = et.QueryExercises().All(ctx)
	}
	return result, err
}

func (mg *MusclesGroup) Exercises(ctx context.Context) (result []*Exercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mg.NamedExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mg.Edges.ExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mg.QueryExercises().All(ctx)
	}
	return result, err
}

func (r *Routine) RoutineExercises(ctx context.Context) (result []*RoutineExercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedRoutineExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.RoutineExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryRoutineExercises().All(ctx)
	}
	return result, err
}

func (r *Routine) Users(ctx context.Context) (*User, error) {
	result, err := r.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (re *RoutineExercise) Routines(ctx context.Context) (*Routine, error) {
	result, err := re.Edges.RoutinesOrErr()
	if IsNotLoaded(err) {
		result, err = re.QueryRoutines().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (re *RoutineExercise) Exercises(ctx context.Context) (*Exercise, error) {
	result, err := re.Edges.ExercisesOrErr()
	if IsNotLoaded(err) {
		result, err = re.QueryExercises().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (re *RoutineExercise) Users(ctx context.Context) (*User, error) {
	result, err := re.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = re.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Token) Users(ctx context.Context) (*User, error) {
	result, err := t.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Tokens(ctx context.Context) (result []*Token, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTokens().All(ctx)
	}
	return result, err
}

func (u *User) Exercises(ctx context.Context) (result []*Exercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryExercises().All(ctx)
	}
	return result, err
}

func (u *User) Routines(ctx context.Context) (result []*Routine, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRoutines(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RoutinesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRoutines().All(ctx)
	}
	return result, err
}

func (u *User) Workouts(ctx context.Context) (result []*Workout, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkouts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkoutsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkouts().All(ctx)
	}
	return result, err
}

func (u *User) WorkoutLogs(ctx context.Context) (result []*WorkoutLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkoutLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkoutLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkoutLogs().All(ctx)
	}
	return result, err
}

func (u *User) RoutineExercises(ctx context.Context) (result []*RoutineExercise, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRoutineExercises(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RoutineExercisesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRoutineExercises().All(ctx)
	}
	return result, err
}

func (w *Workout) Users(ctx context.Context) (*User, error) {
	result, err := w.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Workout) WorkoutLogs(ctx context.Context) (result []*WorkoutLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedWorkoutLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.WorkoutLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryWorkoutLogs().All(ctx)
	}
	return result, err
}

func (wl *WorkoutLog) Users(ctx context.Context) (*User, error) {
	result, err := wl.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = wl.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wl *WorkoutLog) Exercises(ctx context.Context) (*Exercise, error) {
	result, err := wl.Edges.ExercisesOrErr()
	if IsNotLoaded(err) {
		result, err = wl.QueryExercises().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wl *WorkoutLog) Workouts(ctx context.Context) (*Workout, error) {
	result, err := wl.Edges.WorkoutsOrErr()
	if IsNotLoaded(err) {
		result, err = wl.QueryWorkouts().Only(ctx)
	}
	return result, MaskNotFound(err)
}
