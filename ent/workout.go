// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workout"
)

// Workout is the model entity for the Workout schema.
type Workout struct {
	config `json:"-"`
	// ID of the ent.
	ID pksuid.ID `json:"id,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume float64 `json:"volume,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration string `json:"duration,omitempty"`
	// Sets holds the value of the "sets" field.
	Sets int `json:"sets,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Image holds the value of the "image" field.
	Image *schematype.Image `json:"image,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID pksuid.ID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutQuery when eager-loading is set.
	Edges        WorkoutEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkoutEdges holds the relations/edges for other nodes in the graph.
type WorkoutEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// Exercises holds the value of the exercises edge.
	Exercises []*Exercise `json:"exercises,omitempty"`
	// WorkoutLogs holds the value of the workout_logs edge.
	WorkoutLogs []*WorkoutLog `json:"workout_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedExercises   map[string][]*Exercise
	namedWorkoutLogs map[string][]*WorkoutLog
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ExercisesOrErr returns the Exercises value or an error if the edge
// was not loaded in eager-loading.
func (e WorkoutEdges) ExercisesOrErr() ([]*Exercise, error) {
	if e.loadedTypes[1] {
		return e.Exercises, nil
	}
	return nil, &NotLoadedError{edge: "exercises"}
}

// WorkoutLogsOrErr returns the WorkoutLogs value or an error if the edge
// was not loaded in eager-loading.
func (e WorkoutEdges) WorkoutLogsOrErr() ([]*WorkoutLog, error) {
	if e.loadedTypes[2] {
		return e.WorkoutLogs, nil
	}
	return nil, &NotLoadedError{edge: "workout_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workout) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workout.FieldImage:
			values[i] = new([]byte)
		case workout.FieldID, workout.FieldUserID:
			values[i] = new(pksuid.ID)
		case workout.FieldVolume:
			values[i] = new(sql.NullFloat64)
		case workout.FieldSets:
			values[i] = new(sql.NullInt64)
		case workout.FieldDuration, workout.FieldDescription:
			values[i] = new(sql.NullString)
		case workout.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workout fields.
func (w *Workout) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workout.FieldID:
			if value, ok := values[i].(*pksuid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case workout.FieldVolume:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				w.Volume = value.Float64
			}
		case workout.FieldDuration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				w.Duration = value.String
			}
		case workout.FieldSets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sets", values[i])
			} else if value.Valid {
				w.Sets = int(value.Int64)
			}
		case workout.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case workout.FieldImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Image); err != nil {
					return fmt.Errorf("unmarshal field image: %w", err)
				}
			}
		case workout.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = new(string)
				*w.Description = value.String
			}
		case workout.FieldUserID:
			if value, ok := values[i].(*pksuid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				w.UserID = *value
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Workout.
// This includes values selected through modifiers, order, etc.
func (w *Workout) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Workout entity.
func (w *Workout) QueryUsers() *UserQuery {
	return NewWorkoutClient(w.config).QueryUsers(w)
}

// QueryExercises queries the "exercises" edge of the Workout entity.
func (w *Workout) QueryExercises() *ExerciseQuery {
	return NewWorkoutClient(w.config).QueryExercises(w)
}

// QueryWorkoutLogs queries the "workout_logs" edge of the Workout entity.
func (w *Workout) QueryWorkoutLogs() *WorkoutLogQuery {
	return NewWorkoutClient(w.config).QueryWorkoutLogs(w)
}

// Update returns a builder for updating this Workout.
// Note that you need to call Workout.Unwrap() before calling this method if this Workout
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workout) Update() *WorkoutUpdateOne {
	return NewWorkoutClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Workout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workout) Unwrap() *Workout {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workout is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workout) String() string {
	var builder strings.Builder
	builder.WriteString("Workout(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", w.Volume))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(w.Duration)
	builder.WriteString(", ")
	builder.WriteString("sets=")
	builder.WriteString(fmt.Sprintf("%v", w.Sets))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(fmt.Sprintf("%v", w.Image))
	builder.WriteString(", ")
	if v := w.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", w.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedExercises returns the Exercises named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Workout) NamedExercises(name string) ([]*Exercise, error) {
	if w.Edges.namedExercises == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedExercises[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Workout) appendNamedExercises(name string, edges ...*Exercise) {
	if w.Edges.namedExercises == nil {
		w.Edges.namedExercises = make(map[string][]*Exercise)
	}
	if len(edges) == 0 {
		w.Edges.namedExercises[name] = []*Exercise{}
	} else {
		w.Edges.namedExercises[name] = append(w.Edges.namedExercises[name], edges...)
	}
}

// NamedWorkoutLogs returns the WorkoutLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Workout) NamedWorkoutLogs(name string) ([]*WorkoutLog, error) {
	if w.Edges.namedWorkoutLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedWorkoutLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Workout) appendNamedWorkoutLogs(name string, edges ...*WorkoutLog) {
	if w.Edges.namedWorkoutLogs == nil {
		w.Edges.namedWorkoutLogs = make(map[string][]*WorkoutLog)
	}
	if len(edges) == 0 {
		w.Edges.namedWorkoutLogs[name] = []*WorkoutLog{}
	} else {
		w.Edges.namedWorkoutLogs[name] = append(w.Edges.namedWorkoutLogs[name], edges...)
	}
}

// Workouts is a parsable slice of Workout.
type Workouts []*Workout
