// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/predicate"
	"github.com/sahidrahman404/gigachad-api/ent/schema"
	"github.com/sahidrahman404/gigachad-api/ent/user"
	"github.com/sahidrahman404/gigachad-api/ent/workout"
	"github.com/sahidrahman404/gigachad-api/ent/workoutlog"
)

// WorkoutLogUpdate is the builder for updating WorkoutLog entities.
type WorkoutLogUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutLogMutation
}

// Where appends a list predicates to the WorkoutLogUpdate builder.
func (wlu *WorkoutLogUpdate) Where(ps ...predicate.WorkoutLog) *WorkoutLogUpdate {
	wlu.mutation.Where(ps...)
	return wlu
}

// SetSets sets the "sets" field.
func (wlu *WorkoutLogUpdate) SetSets(s *[]schema.Set) *WorkoutLogUpdate {
	wlu.mutation.SetSets(s)
	return wlu
}

// SetCreatedAt sets the "created_at" field.
func (wlu *WorkoutLogUpdate) SetCreatedAt(s string) *WorkoutLogUpdate {
	wlu.mutation.SetCreatedAt(s)
	return wlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableCreatedAt(s *string) *WorkoutLogUpdate {
	if s != nil {
		wlu.SetCreatedAt(*s)
	}
	return wlu
}

// SetExerciseID sets the "exercise_id" field.
func (wlu *WorkoutLogUpdate) SetExerciseID(s string) *WorkoutLogUpdate {
	wlu.mutation.SetExerciseID(s)
	return wlu
}

// SetNillableExerciseID sets the "exercise_id" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableExerciseID(s *string) *WorkoutLogUpdate {
	if s != nil {
		wlu.SetExerciseID(*s)
	}
	return wlu
}

// ClearExerciseID clears the value of the "exercise_id" field.
func (wlu *WorkoutLogUpdate) ClearExerciseID() *WorkoutLogUpdate {
	wlu.mutation.ClearExerciseID()
	return wlu
}

// SetWorkoutID sets the "workout_id" field.
func (wlu *WorkoutLogUpdate) SetWorkoutID(s string) *WorkoutLogUpdate {
	wlu.mutation.SetWorkoutID(s)
	return wlu
}

// SetNillableWorkoutID sets the "workout_id" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableWorkoutID(s *string) *WorkoutLogUpdate {
	if s != nil {
		wlu.SetWorkoutID(*s)
	}
	return wlu
}

// ClearWorkoutID clears the value of the "workout_id" field.
func (wlu *WorkoutLogUpdate) ClearWorkoutID() *WorkoutLogUpdate {
	wlu.mutation.ClearWorkoutID()
	return wlu
}

// SetUserID sets the "user_id" field.
func (wlu *WorkoutLogUpdate) SetUserID(s string) *WorkoutLogUpdate {
	wlu.mutation.SetUserID(s)
	return wlu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableUserID(s *string) *WorkoutLogUpdate {
	if s != nil {
		wlu.SetUserID(*s)
	}
	return wlu
}

// ClearUserID clears the value of the "user_id" field.
func (wlu *WorkoutLogUpdate) ClearUserID() *WorkoutLogUpdate {
	wlu.mutation.ClearUserID()
	return wlu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (wlu *WorkoutLogUpdate) SetUsersID(id string) *WorkoutLogUpdate {
	wlu.mutation.SetUsersID(id)
	return wlu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableUsersID(id *string) *WorkoutLogUpdate {
	if id != nil {
		wlu = wlu.SetUsersID(*id)
	}
	return wlu
}

// SetUsers sets the "users" edge to the User entity.
func (wlu *WorkoutLogUpdate) SetUsers(u *User) *WorkoutLogUpdate {
	return wlu.SetUsersID(u.ID)
}

// SetExercisesID sets the "exercises" edge to the Exercise entity by ID.
func (wlu *WorkoutLogUpdate) SetExercisesID(id string) *WorkoutLogUpdate {
	wlu.mutation.SetExercisesID(id)
	return wlu
}

// SetNillableExercisesID sets the "exercises" edge to the Exercise entity by ID if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableExercisesID(id *string) *WorkoutLogUpdate {
	if id != nil {
		wlu = wlu.SetExercisesID(*id)
	}
	return wlu
}

// SetExercises sets the "exercises" edge to the Exercise entity.
func (wlu *WorkoutLogUpdate) SetExercises(e *Exercise) *WorkoutLogUpdate {
	return wlu.SetExercisesID(e.ID)
}

// SetWorkoutsID sets the "workouts" edge to the Workout entity by ID.
func (wlu *WorkoutLogUpdate) SetWorkoutsID(id string) *WorkoutLogUpdate {
	wlu.mutation.SetWorkoutsID(id)
	return wlu
}

// SetNillableWorkoutsID sets the "workouts" edge to the Workout entity by ID if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableWorkoutsID(id *string) *WorkoutLogUpdate {
	if id != nil {
		wlu = wlu.SetWorkoutsID(*id)
	}
	return wlu
}

// SetWorkouts sets the "workouts" edge to the Workout entity.
func (wlu *WorkoutLogUpdate) SetWorkouts(w *Workout) *WorkoutLogUpdate {
	return wlu.SetWorkoutsID(w.ID)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wlu *WorkoutLogUpdate) Mutation() *WorkoutLogMutation {
	return wlu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (wlu *WorkoutLogUpdate) ClearUsers() *WorkoutLogUpdate {
	wlu.mutation.ClearUsers()
	return wlu
}

// ClearExercises clears the "exercises" edge to the Exercise entity.
func (wlu *WorkoutLogUpdate) ClearExercises() *WorkoutLogUpdate {
	wlu.mutation.ClearExercises()
	return wlu
}

// ClearWorkouts clears the "workouts" edge to the Workout entity.
func (wlu *WorkoutLogUpdate) ClearWorkouts() *WorkoutLogUpdate {
	wlu.mutation.ClearWorkouts()
	return wlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wlu *WorkoutLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wlu.sqlSave, wlu.mutation, wlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wlu *WorkoutLogUpdate) SaveX(ctx context.Context) int {
	affected, err := wlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wlu *WorkoutLogUpdate) Exec(ctx context.Context) error {
	_, err := wlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlu *WorkoutLogUpdate) ExecX(ctx context.Context) {
	if err := wlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wlu *WorkoutLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoutlog.Table, workoutlog.Columns, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString))
	if ps := wlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wlu.mutation.Sets(); ok {
		_spec.SetField(workoutlog.FieldSets, field.TypeJSON, value)
	}
	if value, ok := wlu.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeString, value)
	}
	if wlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UsersTable,
			Columns: []string{workoutlog.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UsersTable,
			Columns: []string{workoutlog.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wlu.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.ExercisesTable,
			Columns: []string{workoutlog.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.ExercisesTable,
			Columns: []string{workoutlog.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wlu.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutsTable,
			Columns: []string{workoutlog.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutsTable,
			Columns: []string{workoutlog.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wlu.mutation.done = true
	return n, nil
}

// WorkoutLogUpdateOne is the builder for updating a single WorkoutLog entity.
type WorkoutLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutLogMutation
}

// SetSets sets the "sets" field.
func (wluo *WorkoutLogUpdateOne) SetSets(s *[]schema.Set) *WorkoutLogUpdateOne {
	wluo.mutation.SetSets(s)
	return wluo
}

// SetCreatedAt sets the "created_at" field.
func (wluo *WorkoutLogUpdateOne) SetCreatedAt(s string) *WorkoutLogUpdateOne {
	wluo.mutation.SetCreatedAt(s)
	return wluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableCreatedAt(s *string) *WorkoutLogUpdateOne {
	if s != nil {
		wluo.SetCreatedAt(*s)
	}
	return wluo
}

// SetExerciseID sets the "exercise_id" field.
func (wluo *WorkoutLogUpdateOne) SetExerciseID(s string) *WorkoutLogUpdateOne {
	wluo.mutation.SetExerciseID(s)
	return wluo
}

// SetNillableExerciseID sets the "exercise_id" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableExerciseID(s *string) *WorkoutLogUpdateOne {
	if s != nil {
		wluo.SetExerciseID(*s)
	}
	return wluo
}

// ClearExerciseID clears the value of the "exercise_id" field.
func (wluo *WorkoutLogUpdateOne) ClearExerciseID() *WorkoutLogUpdateOne {
	wluo.mutation.ClearExerciseID()
	return wluo
}

// SetWorkoutID sets the "workout_id" field.
func (wluo *WorkoutLogUpdateOne) SetWorkoutID(s string) *WorkoutLogUpdateOne {
	wluo.mutation.SetWorkoutID(s)
	return wluo
}

// SetNillableWorkoutID sets the "workout_id" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableWorkoutID(s *string) *WorkoutLogUpdateOne {
	if s != nil {
		wluo.SetWorkoutID(*s)
	}
	return wluo
}

// ClearWorkoutID clears the value of the "workout_id" field.
func (wluo *WorkoutLogUpdateOne) ClearWorkoutID() *WorkoutLogUpdateOne {
	wluo.mutation.ClearWorkoutID()
	return wluo
}

// SetUserID sets the "user_id" field.
func (wluo *WorkoutLogUpdateOne) SetUserID(s string) *WorkoutLogUpdateOne {
	wluo.mutation.SetUserID(s)
	return wluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableUserID(s *string) *WorkoutLogUpdateOne {
	if s != nil {
		wluo.SetUserID(*s)
	}
	return wluo
}

// ClearUserID clears the value of the "user_id" field.
func (wluo *WorkoutLogUpdateOne) ClearUserID() *WorkoutLogUpdateOne {
	wluo.mutation.ClearUserID()
	return wluo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (wluo *WorkoutLogUpdateOne) SetUsersID(id string) *WorkoutLogUpdateOne {
	wluo.mutation.SetUsersID(id)
	return wluo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableUsersID(id *string) *WorkoutLogUpdateOne {
	if id != nil {
		wluo = wluo.SetUsersID(*id)
	}
	return wluo
}

// SetUsers sets the "users" edge to the User entity.
func (wluo *WorkoutLogUpdateOne) SetUsers(u *User) *WorkoutLogUpdateOne {
	return wluo.SetUsersID(u.ID)
}

// SetExercisesID sets the "exercises" edge to the Exercise entity by ID.
func (wluo *WorkoutLogUpdateOne) SetExercisesID(id string) *WorkoutLogUpdateOne {
	wluo.mutation.SetExercisesID(id)
	return wluo
}

// SetNillableExercisesID sets the "exercises" edge to the Exercise entity by ID if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableExercisesID(id *string) *WorkoutLogUpdateOne {
	if id != nil {
		wluo = wluo.SetExercisesID(*id)
	}
	return wluo
}

// SetExercises sets the "exercises" edge to the Exercise entity.
func (wluo *WorkoutLogUpdateOne) SetExercises(e *Exercise) *WorkoutLogUpdateOne {
	return wluo.SetExercisesID(e.ID)
}

// SetWorkoutsID sets the "workouts" edge to the Workout entity by ID.
func (wluo *WorkoutLogUpdateOne) SetWorkoutsID(id string) *WorkoutLogUpdateOne {
	wluo.mutation.SetWorkoutsID(id)
	return wluo
}

// SetNillableWorkoutsID sets the "workouts" edge to the Workout entity by ID if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableWorkoutsID(id *string) *WorkoutLogUpdateOne {
	if id != nil {
		wluo = wluo.SetWorkoutsID(*id)
	}
	return wluo
}

// SetWorkouts sets the "workouts" edge to the Workout entity.
func (wluo *WorkoutLogUpdateOne) SetWorkouts(w *Workout) *WorkoutLogUpdateOne {
	return wluo.SetWorkoutsID(w.ID)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wluo *WorkoutLogUpdateOne) Mutation() *WorkoutLogMutation {
	return wluo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (wluo *WorkoutLogUpdateOne) ClearUsers() *WorkoutLogUpdateOne {
	wluo.mutation.ClearUsers()
	return wluo
}

// ClearExercises clears the "exercises" edge to the Exercise entity.
func (wluo *WorkoutLogUpdateOne) ClearExercises() *WorkoutLogUpdateOne {
	wluo.mutation.ClearExercises()
	return wluo
}

// ClearWorkouts clears the "workouts" edge to the Workout entity.
func (wluo *WorkoutLogUpdateOne) ClearWorkouts() *WorkoutLogUpdateOne {
	wluo.mutation.ClearWorkouts()
	return wluo
}

// Where appends a list predicates to the WorkoutLogUpdate builder.
func (wluo *WorkoutLogUpdateOne) Where(ps ...predicate.WorkoutLog) *WorkoutLogUpdateOne {
	wluo.mutation.Where(ps...)
	return wluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wluo *WorkoutLogUpdateOne) Select(field string, fields ...string) *WorkoutLogUpdateOne {
	wluo.fields = append([]string{field}, fields...)
	return wluo
}

// Save executes the query and returns the updated WorkoutLog entity.
func (wluo *WorkoutLogUpdateOne) Save(ctx context.Context) (*WorkoutLog, error) {
	return withHooks(ctx, wluo.sqlSave, wluo.mutation, wluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wluo *WorkoutLogUpdateOne) SaveX(ctx context.Context) *WorkoutLog {
	node, err := wluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wluo *WorkoutLogUpdateOne) Exec(ctx context.Context) error {
	_, err := wluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wluo *WorkoutLogUpdateOne) ExecX(ctx context.Context) {
	if err := wluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wluo *WorkoutLogUpdateOne) sqlSave(ctx context.Context) (_node *WorkoutLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoutlog.Table, workoutlog.Columns, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeString))
	id, ok := wluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkoutLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutlog.FieldID)
		for _, f := range fields {
			if !workoutlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoutlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wluo.mutation.Sets(); ok {
		_spec.SetField(workoutlog.FieldSets, field.TypeJSON, value)
	}
	if value, ok := wluo.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeString, value)
	}
	if wluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UsersTable,
			Columns: []string{workoutlog.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UsersTable,
			Columns: []string{workoutlog.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wluo.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.ExercisesTable,
			Columns: []string{workoutlog.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.ExercisesTable,
			Columns: []string{workoutlog.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wluo.mutation.WorkoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutsTable,
			Columns: []string{workoutlog.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.WorkoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutsTable,
			Columns: []string{workoutlog.WorkoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkoutLog{config: wluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wluo.mutation.done = true
	return _node, nil
}
