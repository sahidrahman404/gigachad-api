// Code generated by ent, DO NOT EDIT.

package workout

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sahidrahman404/gigachad-api/ent/predicate"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
)

// ID filters vertices based on their ID field.
func ID(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldID, id))
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v int) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldVolume, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldDuration, v))
}

// Sets applies equality check predicate on the "sets" field. It's identical to SetsEQ.
func Sets(v int) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldSets, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldCreatedAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldDescription, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldUserID, v))
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v int) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldVolume, v))
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v int) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldVolume, v))
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...int) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldVolume, vs...))
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...int) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldVolume, vs...))
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v int) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldVolume, v))
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v int) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldVolume, v))
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v int) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldVolume, v))
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v int) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldVolume, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.Workout {
	return predicate.Workout(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.Workout {
	return predicate.Workout(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.Workout {
	return predicate.Workout(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.Workout {
	return predicate.Workout(sql.FieldContainsFold(FieldDuration, v))
}

// SetsEQ applies the EQ predicate on the "sets" field.
func SetsEQ(v int) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldSets, v))
}

// SetsNEQ applies the NEQ predicate on the "sets" field.
func SetsNEQ(v int) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldSets, v))
}

// SetsIn applies the In predicate on the "sets" field.
func SetsIn(vs ...int) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldSets, vs...))
}

// SetsNotIn applies the NotIn predicate on the "sets" field.
func SetsNotIn(vs ...int) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldSets, vs...))
}

// SetsGT applies the GT predicate on the "sets" field.
func SetsGT(v int) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldSets, v))
}

// SetsGTE applies the GTE predicate on the "sets" field.
func SetsGTE(v int) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldSets, v))
}

// SetsLT applies the LT predicate on the "sets" field.
func SetsLT(v int) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldSets, v))
}

// SetsLTE applies the LTE predicate on the "sets" field.
func SetsLTE(v int) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldSets, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldCreatedAt, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.Workout {
	return predicate.Workout(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.Workout {
	return predicate.Workout(sql.FieldNotNull(FieldImage))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Workout {
	return predicate.Workout(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Workout {
	return predicate.Workout(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Workout {
	return predicate.Workout(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Workout {
	return predicate.Workout(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Workout {
	return predicate.Workout(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Workout {
	return predicate.Workout(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Workout {
	return predicate.Workout(sql.FieldContainsFold(FieldDescription, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v pksuid.ID) predicate.Workout {
	return predicate.Workout(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v pksuid.ID) predicate.Workout {
	vc := string(v)
	return predicate.Workout(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v pksuid.ID) predicate.Workout {
	vc := string(v)
	return predicate.Workout(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v pksuid.ID) predicate.Workout {
	vc := string(v)
	return predicate.Workout(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v pksuid.ID) predicate.Workout {
	vc := string(v)
	return predicate.Workout(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v pksuid.ID) predicate.Workout {
	vc := string(v)
	return predicate.Workout(sql.FieldContainsFold(FieldUserID, vc))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExercises applies the HasEdge predicate on the "exercises" edge.
func HasExercises() predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ExercisesTable, ExercisesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExercisesWith applies the HasEdge predicate on the "exercises" edge with a given conditions (other predicates).
func HasExercisesWith(preds ...predicate.Exercise) predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := newExercisesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkoutLogs applies the HasEdge predicate on the "workout_logs" edge.
func HasWorkoutLogs() predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, WorkoutLogsTable, WorkoutLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutLogsWith applies the HasEdge predicate on the "workout_logs" edge with a given conditions (other predicates).
func HasWorkoutLogsWith(preds ...predicate.WorkoutLog) predicate.Workout {
	return predicate.Workout(func(s *sql.Selector) {
		step := newWorkoutLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Workout) predicate.Workout {
	return predicate.Workout(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Workout) predicate.Workout {
	return predicate.Workout(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Workout) predicate.Workout {
	return predicate.Workout(sql.NotPredicates(p))
}
