// Code generated by ent, DO NOT EDIT.

package workoutlog

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
)

const (
	// Label holds the string label denoting the workoutlog type in the database.
	Label = "workout_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSets holds the string denoting the sets field in the database.
	FieldSets = "sets"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeExercises holds the string denoting the exercises edge name in mutations.
	EdgeExercises = "exercises"
	// EdgeWorkouts holds the string denoting the workouts edge name in mutations.
	EdgeWorkouts = "workouts"
	// Table holds the table name of the workoutlog in the database.
	Table = "workout_logs"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "workout_logs"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// ExercisesTable is the table that holds the exercises relation/edge.
	ExercisesTable = "workout_logs"
	// ExercisesInverseTable is the table name for the Exercise entity.
	// It exists in this package in order to avoid circular dependency with the "exercise" package.
	ExercisesInverseTable = "exercises"
	// ExercisesColumn is the table column denoting the exercises relation/edge.
	ExercisesColumn = "exercise_workout_logs"
	// WorkoutsTable is the table that holds the workouts relation/edge.
	WorkoutsTable = "workout_logs"
	// WorkoutsInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutsInverseTable = "workouts"
	// WorkoutsColumn is the table column denoting the workouts relation/edge.
	WorkoutsColumn = "workout_workout_logs"
)

// Columns holds all SQL columns for workoutlog fields.
var Columns = []string{
	FieldID,
	FieldSets,
	FieldCreatedAt,
	FieldUserID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exercise_workout_logs",
	"workout_workout_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pksuid.ID
)

// OrderOption defines the ordering options for the WorkoutLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByExercisesField orders the results by exercises field.
func ByExercisesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExercisesStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkoutsField orders the results by workouts field.
func ByWorkoutsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutsStep(), sql.OrderByField(field, opts...))
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newExercisesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExercisesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExercisesTable, ExercisesColumn),
	)
}
func newWorkoutsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkoutsTable, WorkoutsColumn),
	)
}
