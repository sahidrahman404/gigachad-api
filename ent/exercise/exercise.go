// Code generated by ent, DO NOT EDIT.

package exercise

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
)

const (
	// Label holds the string label denoting the exercise type in the database.
	Label = "exercise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldHowTo holds the string denoting the how_to field in the database.
	FieldHowTo = "how_to"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeWorkoutLogs holds the string denoting the workout_logs edge name in mutations.
	EdgeWorkoutLogs = "workout_logs"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeEquipment holds the string denoting the equipment edge name in mutations.
	EdgeEquipment = "equipment"
	// EdgeMusclesGroups holds the string denoting the muscles_groups edge name in mutations.
	EdgeMusclesGroups = "muscles_groups"
	// EdgeExerciseTypes holds the string denoting the exercise_types edge name in mutations.
	EdgeExerciseTypes = "exercise_types"
	// EdgeRoutines holds the string denoting the routines edge name in mutations.
	EdgeRoutines = "routines"
	// EdgeRoutineExercises holds the string denoting the routine_exercises edge name in mutations.
	EdgeRoutineExercises = "routine_exercises"
	// Table holds the table name of the exercise in the database.
	Table = "exercises"
	// WorkoutLogsTable is the table that holds the workout_logs relation/edge.
	WorkoutLogsTable = "workout_logs"
	// WorkoutLogsInverseTable is the table name for the WorkoutLog entity.
	// It exists in this package in order to avoid circular dependency with the "workoutlog" package.
	WorkoutLogsInverseTable = "workout_logs"
	// WorkoutLogsColumn is the table column denoting the workout_logs relation/edge.
	WorkoutLogsColumn = "exercise_workout_logs"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "exercises"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_id"
	// EquipmentTable is the table that holds the equipment relation/edge. The primary key declared below.
	EquipmentTable = "equipment_exercises"
	// EquipmentInverseTable is the table name for the Equipment entity.
	// It exists in this package in order to avoid circular dependency with the "equipment" package.
	EquipmentInverseTable = "equipment"
	// MusclesGroupsTable is the table that holds the muscles_groups relation/edge. The primary key declared below.
	MusclesGroupsTable = "muscles_group_exercises"
	// MusclesGroupsInverseTable is the table name for the MusclesGroup entity.
	// It exists in this package in order to avoid circular dependency with the "musclesgroup" package.
	MusclesGroupsInverseTable = "muscles_groups"
	// ExerciseTypesTable is the table that holds the exercise_types relation/edge. The primary key declared below.
	ExerciseTypesTable = "exercise_type_exercises"
	// ExerciseTypesInverseTable is the table name for the ExerciseType entity.
	// It exists in this package in order to avoid circular dependency with the "exercisetype" package.
	ExerciseTypesInverseTable = "exercise_types"
	// RoutinesTable is the table that holds the routines relation/edge. The primary key declared below.
	RoutinesTable = "routine_exercises"
	// RoutinesInverseTable is the table name for the Routine entity.
	// It exists in this package in order to avoid circular dependency with the "routine" package.
	RoutinesInverseTable = "routines"
	// RoutineExercisesTable is the table that holds the routine_exercises relation/edge.
	RoutineExercisesTable = "routine_exercises"
	// RoutineExercisesInverseTable is the table name for the RoutineExercise entity.
	// It exists in this package in order to avoid circular dependency with the "routineexercise" package.
	RoutineExercisesInverseTable = "routine_exercises"
	// RoutineExercisesColumn is the table column denoting the routine_exercises relation/edge.
	RoutineExercisesColumn = "exercise_id"
)

// Columns holds all SQL columns for exercise fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImage,
	FieldHowTo,
	FieldUserID,
}

var (
	// EquipmentPrimaryKey and EquipmentColumn2 are the table columns denoting the
	// primary key for the equipment relation (M2M).
	EquipmentPrimaryKey = []string{"equipment_id", "exercise_id"}
	// MusclesGroupsPrimaryKey and MusclesGroupsColumn2 are the table columns denoting the
	// primary key for the muscles_groups relation (M2M).
	MusclesGroupsPrimaryKey = []string{"muscles_group_id", "exercise_id"}
	// ExerciseTypesPrimaryKey and ExerciseTypesColumn2 are the table columns denoting the
	// primary key for the exercise_types relation (M2M).
	ExerciseTypesPrimaryKey = []string{"exercise_type_id", "exercise_id"}
	// RoutinesPrimaryKey and RoutinesColumn2 are the table columns denoting the
	// primary key for the routines relation (M2M).
	RoutinesPrimaryKey = []string{"routine_id", "exercise_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/sahidrahman404/gigachad-api/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pksuid.ID
)

// OrderOption defines the ordering options for the Exercise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHowTo orders the results by the how_to field.
func ByHowTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHowTo, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByWorkoutLogsCount orders the results by workout_logs count.
func ByWorkoutLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkoutLogsStep(), opts...)
	}
}

// ByWorkoutLogs orders the results by workout_logs terms.
func ByWorkoutLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}

// ByEquipmentCount orders the results by equipment count.
func ByEquipmentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEquipmentStep(), opts...)
	}
}

// ByEquipment orders the results by equipment terms.
func ByEquipment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEquipmentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMusclesGroupsCount orders the results by muscles_groups count.
func ByMusclesGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMusclesGroupsStep(), opts...)
	}
}

// ByMusclesGroups orders the results by muscles_groups terms.
func ByMusclesGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMusclesGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExerciseTypesCount orders the results by exercise_types count.
func ByExerciseTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExerciseTypesStep(), opts...)
	}
}

// ByExerciseTypes orders the results by exercise_types terms.
func ByExerciseTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoutinesCount orders the results by routines count.
func ByRoutinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoutinesStep(), opts...)
	}
}

// ByRoutines orders the results by routines terms.
func ByRoutines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoutineExercisesCount orders the results by routine_exercises count.
func ByRoutineExercisesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoutineExercisesStep(), opts...)
	}
}

// ByRoutineExercises orders the results by routine_exercises terms.
func ByRoutineExercises(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoutineExercisesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWorkoutLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkoutLogsTable, WorkoutLogsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
func newEquipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EquipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EquipmentTable, EquipmentPrimaryKey...),
	)
}
func newMusclesGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MusclesGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MusclesGroupsTable, MusclesGroupsPrimaryKey...),
	)
}
func newExerciseTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ExerciseTypesTable, ExerciseTypesPrimaryKey...),
	)
}
func newRoutinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RoutinesTable, RoutinesPrimaryKey...),
	)
}
func newRoutineExercisesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoutineExercisesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RoutineExercisesTable, RoutineExercisesColumn),
	)
}
