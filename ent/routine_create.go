// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/routineexercise"
	"github.com/sahidrahman404/gigachad-api/ent/user"
)

// RoutineCreate is the builder for creating a Routine entity.
type RoutineCreate struct {
	config
	mutation *RoutineMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RoutineCreate) SetName(s string) *RoutineCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *RoutineCreate) SetUserID(s string) *RoutineCreate {
	rc.mutation.SetUserID(s)
	return rc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rc *RoutineCreate) SetNillableUserID(s *string) *RoutineCreate {
	if s != nil {
		rc.SetUserID(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RoutineCreate) SetID(s string) *RoutineCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RoutineCreate) SetNillableID(s *string) *RoutineCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// AddRoutineExerciseIDs adds the "routine_exercises" edge to the RoutineExercise entity by IDs.
func (rc *RoutineCreate) AddRoutineExerciseIDs(ids ...string) *RoutineCreate {
	rc.mutation.AddRoutineExerciseIDs(ids...)
	return rc
}

// AddRoutineExercises adds the "routine_exercises" edges to the RoutineExercise entity.
func (rc *RoutineCreate) AddRoutineExercises(r ...*RoutineExercise) *RoutineCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoutineExerciseIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (rc *RoutineCreate) SetUsersID(id string) *RoutineCreate {
	rc.mutation.SetUsersID(id)
	return rc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (rc *RoutineCreate) SetNillableUsersID(id *string) *RoutineCreate {
	if id != nil {
		rc = rc.SetUsersID(*id)
	}
	return rc
}

// SetUsers sets the "users" edge to the User entity.
func (rc *RoutineCreate) SetUsers(u *User) *RoutineCreate {
	return rc.SetUsersID(u.ID)
}

// Mutation returns the RoutineMutation object of the builder.
func (rc *RoutineCreate) Mutation() *RoutineMutation {
	return rc.mutation
}

// Save creates the Routine in the database.
func (rc *RoutineCreate) Save(ctx context.Context) (*Routine, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoutineCreate) SaveX(ctx context.Context) *Routine {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoutineCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoutineCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RoutineCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := routine.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoutineCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Routine.name"`)}
	}
	return nil
}

func (rc *RoutineCreate) sqlSave(ctx context.Context) (*Routine, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Routine.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoutineCreate) createSpec() (*Routine, *sqlgraph.CreateSpec) {
	var (
		_node = &Routine{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(routine.Table, sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(routine.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := rc.mutation.RoutineExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   routine.RoutineExercisesTable,
			Columns: []string{routine.RoutineExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routine.UsersTable,
			Columns: []string{routine.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoutineCreateBulk is the builder for creating many Routine entities in bulk.
type RoutineCreateBulk struct {
	config
	builders []*RoutineCreate
}

// Save creates the Routine entities in the database.
func (rcb *RoutineCreateBulk) Save(ctx context.Context) ([]*Routine, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Routine, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoutineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoutineCreateBulk) SaveX(ctx context.Context) []*Routine {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoutineCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoutineCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
