// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/equipment"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
)

// EquipmentCreate is the builder for creating a Equipment entity.
type EquipmentCreate struct {
	config
	mutation *EquipmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ec *EquipmentCreate) SetName(s string) *EquipmentCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetImage sets the "image" field.
func (ec *EquipmentCreate) SetImage(s schematype.Image) *EquipmentCreate {
	ec.mutation.SetImage(s)
	return ec
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableImage(s *schematype.Image) *EquipmentCreate {
	if s != nil {
		ec.SetImage(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EquipmentCreate) SetID(pk pksuid.ID) *EquipmentCreate {
	ec.mutation.SetID(pk)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EquipmentCreate) SetNillableID(pk *pksuid.ID) *EquipmentCreate {
	if pk != nil {
		ec.SetID(*pk)
	}
	return ec
}

// AddExerciseIDs adds the "exercises" edge to the Exercise entity by IDs.
func (ec *EquipmentCreate) AddExerciseIDs(ids ...pksuid.ID) *EquipmentCreate {
	ec.mutation.AddExerciseIDs(ids...)
	return ec
}

// AddExercises adds the "exercises" edges to the Exercise entity.
func (ec *EquipmentCreate) AddExercises(e ...*Exercise) *EquipmentCreate {
	ids := make([]pksuid.ID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExerciseIDs(ids...)
}

// Mutation returns the EquipmentMutation object of the builder.
func (ec *EquipmentCreate) Mutation() *EquipmentMutation {
	return ec.mutation
}

// Save creates the Equipment in the database.
func (ec *EquipmentCreate) Save(ctx context.Context) (*Equipment, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EquipmentCreate) SaveX(ctx context.Context) *Equipment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EquipmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EquipmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EquipmentCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := equipment.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EquipmentCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Equipment.name"`)}
	}
	return nil
}

func (ec *EquipmentCreate) sqlSave(ctx context.Context) (*Equipment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pksuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EquipmentCreate) createSpec() (*Equipment, *sqlgraph.CreateSpec) {
	var (
		_node = &Equipment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(equipment.Table, sqlgraph.NewFieldSpec(equipment.FieldID, field.TypeString))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(equipment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Image(); ok {
		_spec.SetField(equipment.FieldImage, field.TypeJSON, value)
		_node.Image = value
	}
	if nodes := ec.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   equipment.ExercisesTable,
			Columns: equipment.ExercisesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Equipment.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EquipmentUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ec *EquipmentCreate) OnConflict(opts ...sql.ConflictOption) *EquipmentUpsertOne {
	ec.conflict = opts
	return &EquipmentUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Equipment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EquipmentCreate) OnConflictColumns(columns ...string) *EquipmentUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EquipmentUpsertOne{
		create: ec,
	}
}

type (
	// EquipmentUpsertOne is the builder for "upsert"-ing
	//  one Equipment node.
	EquipmentUpsertOne struct {
		create *EquipmentCreate
	}

	// EquipmentUpsert is the "OnConflict" setter.
	EquipmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EquipmentUpsert) SetName(v string) *EquipmentUpsert {
	u.Set(equipment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EquipmentUpsert) UpdateName() *EquipmentUpsert {
	u.SetExcluded(equipment.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *EquipmentUpsert) SetImage(v schematype.Image) *EquipmentUpsert {
	u.Set(equipment.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *EquipmentUpsert) UpdateImage() *EquipmentUpsert {
	u.SetExcluded(equipment.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *EquipmentUpsert) ClearImage() *EquipmentUpsert {
	u.SetNull(equipment.FieldImage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Equipment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(equipment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EquipmentUpsertOne) UpdateNewValues() *EquipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(equipment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Equipment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EquipmentUpsertOne) Ignore() *EquipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EquipmentUpsertOne) DoNothing() *EquipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EquipmentCreate.OnConflict
// documentation for more info.
func (u *EquipmentUpsertOne) Update(set func(*EquipmentUpsert)) *EquipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EquipmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EquipmentUpsertOne) SetName(v string) *EquipmentUpsertOne {
	return u.Update(func(s *EquipmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EquipmentUpsertOne) UpdateName() *EquipmentUpsertOne {
	return u.Update(func(s *EquipmentUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *EquipmentUpsertOne) SetImage(v schematype.Image) *EquipmentUpsertOne {
	return u.Update(func(s *EquipmentUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *EquipmentUpsertOne) UpdateImage() *EquipmentUpsertOne {
	return u.Update(func(s *EquipmentUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *EquipmentUpsertOne) ClearImage() *EquipmentUpsertOne {
	return u.Update(func(s *EquipmentUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *EquipmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EquipmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EquipmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EquipmentUpsertOne) ID(ctx context.Context) (id pksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EquipmentUpsertOne.ID is not supported by MySQL driver. Use EquipmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EquipmentUpsertOne) IDX(ctx context.Context) pksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EquipmentCreateBulk is the builder for creating many Equipment entities in bulk.
type EquipmentCreateBulk struct {
	config
	err      error
	builders []*EquipmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Equipment entities in the database.
func (ecb *EquipmentCreateBulk) Save(ctx context.Context) ([]*Equipment, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Equipment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EquipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EquipmentCreateBulk) SaveX(ctx context.Context) []*Equipment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EquipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EquipmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Equipment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EquipmentUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ecb *EquipmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *EquipmentUpsertBulk {
	ecb.conflict = opts
	return &EquipmentUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Equipment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EquipmentCreateBulk) OnConflictColumns(columns ...string) *EquipmentUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EquipmentUpsertBulk{
		create: ecb,
	}
}

// EquipmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Equipment nodes.
type EquipmentUpsertBulk struct {
	create *EquipmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Equipment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(equipment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EquipmentUpsertBulk) UpdateNewValues() *EquipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(equipment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Equipment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EquipmentUpsertBulk) Ignore() *EquipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EquipmentUpsertBulk) DoNothing() *EquipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EquipmentCreateBulk.OnConflict
// documentation for more info.
func (u *EquipmentUpsertBulk) Update(set func(*EquipmentUpsert)) *EquipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EquipmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EquipmentUpsertBulk) SetName(v string) *EquipmentUpsertBulk {
	return u.Update(func(s *EquipmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EquipmentUpsertBulk) UpdateName() *EquipmentUpsertBulk {
	return u.Update(func(s *EquipmentUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *EquipmentUpsertBulk) SetImage(v schematype.Image) *EquipmentUpsertBulk {
	return u.Update(func(s *EquipmentUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *EquipmentUpsertBulk) UpdateImage() *EquipmentUpsertBulk {
	return u.Update(func(s *EquipmentUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *EquipmentUpsertBulk) ClearImage() *EquipmentUpsertBulk {
	return u.Update(func(s *EquipmentUpsert) {
		s.ClearImage()
	})
}

// Exec executes the query.
func (u *EquipmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EquipmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EquipmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EquipmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
