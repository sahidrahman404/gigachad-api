// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sahidrahman404/gigachad-api/ent/exercise"
	"github.com/sahidrahman404/gigachad-api/ent/routine"
	"github.com/sahidrahman404/gigachad-api/ent/routineexercise"
	"github.com/sahidrahman404/gigachad-api/ent/schema/pksuid"
	"github.com/sahidrahman404/gigachad-api/ent/schema/schematype"
	"github.com/sahidrahman404/gigachad-api/ent/user"
)

// RoutineExerciseCreate is the builder for creating a RoutineExercise entity.
type RoutineExerciseCreate struct {
	config
	mutation *RoutineExerciseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRestTime sets the "rest_time" field.
func (rec *RoutineExerciseCreate) SetRestTime(s string) *RoutineExerciseCreate {
	rec.mutation.SetRestTime(s)
	return rec
}

// SetNillableRestTime sets the "rest_time" field if the given value is not nil.
func (rec *RoutineExerciseCreate) SetNillableRestTime(s *string) *RoutineExerciseCreate {
	if s != nil {
		rec.SetRestTime(*s)
	}
	return rec
}

// SetSets sets the "sets" field.
func (rec *RoutineExerciseCreate) SetSets(s []*schematype.Set) *RoutineExerciseCreate {
	rec.mutation.SetSets(s)
	return rec
}

// SetRoutineID sets the "routine_id" field.
func (rec *RoutineExerciseCreate) SetRoutineID(pk pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetRoutineID(pk)
	return rec
}

// SetExerciseID sets the "exercise_id" field.
func (rec *RoutineExerciseCreate) SetExerciseID(pk pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetExerciseID(pk)
	return rec
}

// SetUserID sets the "user_id" field.
func (rec *RoutineExerciseCreate) SetUserID(pk pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetUserID(pk)
	return rec
}

// SetID sets the "id" field.
func (rec *RoutineExerciseCreate) SetID(pk pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetID(pk)
	return rec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rec *RoutineExerciseCreate) SetNillableID(pk *pksuid.ID) *RoutineExerciseCreate {
	if pk != nil {
		rec.SetID(*pk)
	}
	return rec
}

// SetRoutinesID sets the "routines" edge to the Routine entity by ID.
func (rec *RoutineExerciseCreate) SetRoutinesID(id pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetRoutinesID(id)
	return rec
}

// SetRoutines sets the "routines" edge to the Routine entity.
func (rec *RoutineExerciseCreate) SetRoutines(r *Routine) *RoutineExerciseCreate {
	return rec.SetRoutinesID(r.ID)
}

// SetExercisesID sets the "exercises" edge to the Exercise entity by ID.
func (rec *RoutineExerciseCreate) SetExercisesID(id pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetExercisesID(id)
	return rec
}

// SetExercises sets the "exercises" edge to the Exercise entity.
func (rec *RoutineExerciseCreate) SetExercises(e *Exercise) *RoutineExerciseCreate {
	return rec.SetExercisesID(e.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (rec *RoutineExerciseCreate) SetUsersID(id pksuid.ID) *RoutineExerciseCreate {
	rec.mutation.SetUsersID(id)
	return rec
}

// SetUsers sets the "users" edge to the User entity.
func (rec *RoutineExerciseCreate) SetUsers(u *User) *RoutineExerciseCreate {
	return rec.SetUsersID(u.ID)
}

// Mutation returns the RoutineExerciseMutation object of the builder.
func (rec *RoutineExerciseCreate) Mutation() *RoutineExerciseMutation {
	return rec.mutation
}

// Save creates the RoutineExercise in the database.
func (rec *RoutineExerciseCreate) Save(ctx context.Context) (*RoutineExercise, error) {
	rec.defaults()
	return withHooks(ctx, rec.sqlSave, rec.mutation, rec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rec *RoutineExerciseCreate) SaveX(ctx context.Context) *RoutineExercise {
	v, err := rec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rec *RoutineExerciseCreate) Exec(ctx context.Context) error {
	_, err := rec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rec *RoutineExerciseCreate) ExecX(ctx context.Context) {
	if err := rec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rec *RoutineExerciseCreate) defaults() {
	if _, ok := rec.mutation.ID(); !ok {
		v := routineexercise.DefaultID()
		rec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rec *RoutineExerciseCreate) check() error {
	if _, ok := rec.mutation.Sets(); !ok {
		return &ValidationError{Name: "sets", err: errors.New(`ent: missing required field "RoutineExercise.sets"`)}
	}
	if _, ok := rec.mutation.RoutineID(); !ok {
		return &ValidationError{Name: "routine_id", err: errors.New(`ent: missing required field "RoutineExercise.routine_id"`)}
	}
	if _, ok := rec.mutation.ExerciseID(); !ok {
		return &ValidationError{Name: "exercise_id", err: errors.New(`ent: missing required field "RoutineExercise.exercise_id"`)}
	}
	if _, ok := rec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RoutineExercise.user_id"`)}
	}
	if _, ok := rec.mutation.RoutinesID(); !ok {
		return &ValidationError{Name: "routines", err: errors.New(`ent: missing required edge "RoutineExercise.routines"`)}
	}
	if _, ok := rec.mutation.ExercisesID(); !ok {
		return &ValidationError{Name: "exercises", err: errors.New(`ent: missing required edge "RoutineExercise.exercises"`)}
	}
	if _, ok := rec.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "RoutineExercise.users"`)}
	}
	return nil
}

func (rec *RoutineExerciseCreate) sqlSave(ctx context.Context) (*RoutineExercise, error) {
	if err := rec.check(); err != nil {
		return nil, err
	}
	_node, _spec := rec.createSpec()
	if err := sqlgraph.CreateNode(ctx, rec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pksuid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rec.mutation.id = &_node.ID
	rec.mutation.done = true
	return _node, nil
}

func (rec *RoutineExerciseCreate) createSpec() (*RoutineExercise, *sqlgraph.CreateSpec) {
	var (
		_node = &RoutineExercise{config: rec.config}
		_spec = sqlgraph.NewCreateSpec(routineexercise.Table, sqlgraph.NewFieldSpec(routineexercise.FieldID, field.TypeString))
	)
	_spec.OnConflict = rec.conflict
	if id, ok := rec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rec.mutation.RestTime(); ok {
		_spec.SetField(routineexercise.FieldRestTime, field.TypeString, value)
		_node.RestTime = &value
	}
	if value, ok := rec.mutation.Sets(); ok {
		_spec.SetField(routineexercise.FieldSets, field.TypeJSON, value)
		_node.Sets = value
	}
	if nodes := rec.mutation.RoutinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   routineexercise.RoutinesTable,
			Columns: []string{routineexercise.RoutinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(routine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoutineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   routineexercise.ExercisesTable,
			Columns: []string{routineexercise.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExerciseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rec.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   routineexercise.UsersTable,
			Columns: []string{routineexercise.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoutineExercise.Create().
//		SetRestTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoutineExerciseUpsert) {
//			SetRestTime(v+v).
//		}).
//		Exec(ctx)
func (rec *RoutineExerciseCreate) OnConflict(opts ...sql.ConflictOption) *RoutineExerciseUpsertOne {
	rec.conflict = opts
	return &RoutineExerciseUpsertOne{
		create: rec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rec *RoutineExerciseCreate) OnConflictColumns(columns ...string) *RoutineExerciseUpsertOne {
	rec.conflict = append(rec.conflict, sql.ConflictColumns(columns...))
	return &RoutineExerciseUpsertOne{
		create: rec,
	}
}

type (
	// RoutineExerciseUpsertOne is the builder for "upsert"-ing
	//  one RoutineExercise node.
	RoutineExerciseUpsertOne struct {
		create *RoutineExerciseCreate
	}

	// RoutineExerciseUpsert is the "OnConflict" setter.
	RoutineExerciseUpsert struct {
		*sql.UpdateSet
	}
)

// SetRestTime sets the "rest_time" field.
func (u *RoutineExerciseUpsert) SetRestTime(v string) *RoutineExerciseUpsert {
	u.Set(routineexercise.FieldRestTime, v)
	return u
}

// UpdateRestTime sets the "rest_time" field to the value that was provided on create.
func (u *RoutineExerciseUpsert) UpdateRestTime() *RoutineExerciseUpsert {
	u.SetExcluded(routineexercise.FieldRestTime)
	return u
}

// ClearRestTime clears the value of the "rest_time" field.
func (u *RoutineExerciseUpsert) ClearRestTime() *RoutineExerciseUpsert {
	u.SetNull(routineexercise.FieldRestTime)
	return u
}

// SetSets sets the "sets" field.
func (u *RoutineExerciseUpsert) SetSets(v []*schematype.Set) *RoutineExerciseUpsert {
	u.Set(routineexercise.FieldSets, v)
	return u
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *RoutineExerciseUpsert) UpdateSets() *RoutineExerciseUpsert {
	u.SetExcluded(routineexercise.FieldSets)
	return u
}

// SetRoutineID sets the "routine_id" field.
func (u *RoutineExerciseUpsert) SetRoutineID(v pksuid.ID) *RoutineExerciseUpsert {
	u.Set(routineexercise.FieldRoutineID, v)
	return u
}

// UpdateRoutineID sets the "routine_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsert) UpdateRoutineID() *RoutineExerciseUpsert {
	u.SetExcluded(routineexercise.FieldRoutineID)
	return u
}

// SetExerciseID sets the "exercise_id" field.
func (u *RoutineExerciseUpsert) SetExerciseID(v pksuid.ID) *RoutineExerciseUpsert {
	u.Set(routineexercise.FieldExerciseID, v)
	return u
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsert) UpdateExerciseID() *RoutineExerciseUpsert {
	u.SetExcluded(routineexercise.FieldExerciseID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RoutineExerciseUpsert) SetUserID(v pksuid.ID) *RoutineExerciseUpsert {
	u.Set(routineexercise.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsert) UpdateUserID() *RoutineExerciseUpsert {
	u.SetExcluded(routineexercise.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(routineexercise.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoutineExerciseUpsertOne) UpdateNewValues() *RoutineExerciseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(routineexercise.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoutineExerciseUpsertOne) Ignore() *RoutineExerciseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoutineExerciseUpsertOne) DoNothing() *RoutineExerciseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoutineExerciseCreate.OnConflict
// documentation for more info.
func (u *RoutineExerciseUpsertOne) Update(set func(*RoutineExerciseUpsert)) *RoutineExerciseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoutineExerciseUpsert{UpdateSet: update})
	}))
	return u
}

// SetRestTime sets the "rest_time" field.
func (u *RoutineExerciseUpsertOne) SetRestTime(v string) *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetRestTime(v)
	})
}

// UpdateRestTime sets the "rest_time" field to the value that was provided on create.
func (u *RoutineExerciseUpsertOne) UpdateRestTime() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateRestTime()
	})
}

// ClearRestTime clears the value of the "rest_time" field.
func (u *RoutineExerciseUpsertOne) ClearRestTime() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.ClearRestTime()
	})
}

// SetSets sets the "sets" field.
func (u *RoutineExerciseUpsertOne) SetSets(v []*schematype.Set) *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetSets(v)
	})
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *RoutineExerciseUpsertOne) UpdateSets() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateSets()
	})
}

// SetRoutineID sets the "routine_id" field.
func (u *RoutineExerciseUpsertOne) SetRoutineID(v pksuid.ID) *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetRoutineID(v)
	})
}

// UpdateRoutineID sets the "routine_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertOne) UpdateRoutineID() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateRoutineID()
	})
}

// SetExerciseID sets the "exercise_id" field.
func (u *RoutineExerciseUpsertOne) SetExerciseID(v pksuid.ID) *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetExerciseID(v)
	})
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertOne) UpdateExerciseID() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateExerciseID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RoutineExerciseUpsertOne) SetUserID(v pksuid.ID) *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertOne) UpdateUserID() *RoutineExerciseUpsertOne {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *RoutineExerciseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoutineExerciseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoutineExerciseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoutineExerciseUpsertOne) ID(ctx context.Context) (id pksuid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RoutineExerciseUpsertOne.ID is not supported by MySQL driver. Use RoutineExerciseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoutineExerciseUpsertOne) IDX(ctx context.Context) pksuid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoutineExerciseCreateBulk is the builder for creating many RoutineExercise entities in bulk.
type RoutineExerciseCreateBulk struct {
	config
	err      error
	builders []*RoutineExerciseCreate
	conflict []sql.ConflictOption
}

// Save creates the RoutineExercise entities in the database.
func (recb *RoutineExerciseCreateBulk) Save(ctx context.Context) ([]*RoutineExercise, error) {
	if recb.err != nil {
		return nil, recb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(recb.builders))
	nodes := make([]*RoutineExercise, len(recb.builders))
	mutators := make([]Mutator, len(recb.builders))
	for i := range recb.builders {
		func(i int, root context.Context) {
			builder := recb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoutineExerciseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, recb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = recb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, recb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, recb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (recb *RoutineExerciseCreateBulk) SaveX(ctx context.Context) []*RoutineExercise {
	v, err := recb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (recb *RoutineExerciseCreateBulk) Exec(ctx context.Context) error {
	_, err := recb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (recb *RoutineExerciseCreateBulk) ExecX(ctx context.Context) {
	if err := recb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoutineExercise.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoutineExerciseUpsert) {
//			SetRestTime(v+v).
//		}).
//		Exec(ctx)
func (recb *RoutineExerciseCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoutineExerciseUpsertBulk {
	recb.conflict = opts
	return &RoutineExerciseUpsertBulk{
		create: recb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (recb *RoutineExerciseCreateBulk) OnConflictColumns(columns ...string) *RoutineExerciseUpsertBulk {
	recb.conflict = append(recb.conflict, sql.ConflictColumns(columns...))
	return &RoutineExerciseUpsertBulk{
		create: recb,
	}
}

// RoutineExerciseUpsertBulk is the builder for "upsert"-ing
// a bulk of RoutineExercise nodes.
type RoutineExerciseUpsertBulk struct {
	create *RoutineExerciseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(routineexercise.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoutineExerciseUpsertBulk) UpdateNewValues() *RoutineExerciseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(routineexercise.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoutineExercise.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoutineExerciseUpsertBulk) Ignore() *RoutineExerciseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoutineExerciseUpsertBulk) DoNothing() *RoutineExerciseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoutineExerciseCreateBulk.OnConflict
// documentation for more info.
func (u *RoutineExerciseUpsertBulk) Update(set func(*RoutineExerciseUpsert)) *RoutineExerciseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoutineExerciseUpsert{UpdateSet: update})
	}))
	return u
}

// SetRestTime sets the "rest_time" field.
func (u *RoutineExerciseUpsertBulk) SetRestTime(v string) *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetRestTime(v)
	})
}

// UpdateRestTime sets the "rest_time" field to the value that was provided on create.
func (u *RoutineExerciseUpsertBulk) UpdateRestTime() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateRestTime()
	})
}

// ClearRestTime clears the value of the "rest_time" field.
func (u *RoutineExerciseUpsertBulk) ClearRestTime() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.ClearRestTime()
	})
}

// SetSets sets the "sets" field.
func (u *RoutineExerciseUpsertBulk) SetSets(v []*schematype.Set) *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetSets(v)
	})
}

// UpdateSets sets the "sets" field to the value that was provided on create.
func (u *RoutineExerciseUpsertBulk) UpdateSets() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateSets()
	})
}

// SetRoutineID sets the "routine_id" field.
func (u *RoutineExerciseUpsertBulk) SetRoutineID(v pksuid.ID) *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetRoutineID(v)
	})
}

// UpdateRoutineID sets the "routine_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertBulk) UpdateRoutineID() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateRoutineID()
	})
}

// SetExerciseID sets the "exercise_id" field.
func (u *RoutineExerciseUpsertBulk) SetExerciseID(v pksuid.ID) *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetExerciseID(v)
	})
}

// UpdateExerciseID sets the "exercise_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertBulk) UpdateExerciseID() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateExerciseID()
	})
}

// SetUserID sets the "user_id" field.
func (u *RoutineExerciseUpsertBulk) SetUserID(v pksuid.ID) *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoutineExerciseUpsertBulk) UpdateUserID() *RoutineExerciseUpsertBulk {
	return u.Update(func(s *RoutineExerciseUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *RoutineExerciseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoutineExerciseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoutineExerciseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoutineExerciseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
